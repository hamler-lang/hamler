name: Build hamler packages

on:
  pull_request:
  push:
  release:
    types:
      - published

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        otp: ['23.0']
        ghc: ['8.10.4']
        cabal: ['3.4.0.0']

    container: "ghcr.io/hamler-lang/hamler/base:otp${{ matrix.otp }}-ghc${{ matrix.ghc }}-cabal${{ matrix.cabal }}-debian"

    steps:
    - uses: actions/checkout@v1
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: debian-${{ matrix.ghc }}-${{ matrix.cabal }}-v1-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
        restore-keys: |
          debian-${{ matrix.ghc }}-${{ matrix.cabal }}-v1-
    - name: make hamler
      env:
        HAMLER_HOME: /usr/lib/hamler
      run: |
        mkdir -p $HAMLER_HOME/bin
        cabal update
        cabal run hamler build -- -l -e
        cabal run hamler testDev
        cabal install --overwrite-policy=always
        cp ~/.cabal/bin/hamler /usr/bin/
        cp ~/.cabal/bin/hamler $HAMLER_HOME/bin
        cp repl/replsrv $HAMLER_HOME/bin/replsrv
        cp -r ebin  $HAMLER_HOME
        cp -r lib  $HAMLER_HOME
        rm -rf ~/.cabal/bin/hamler
    - name: tests
      run: |
        mkdir -p test
        cd test
        hamler init
        hamler build
        hamler run
        echo ":q" | hamler repl
    - name: create tgz file
      run: |
        version=$(git describe --tags --always)
        cd /usr/lib && tar cvf hamler-${version}.tgz hamler && cd -
        mkdir -p _packages
        mv /usr/lib/hamler-${version}.tgz _packages
        cd _packages && for var in $(ls *.tgz); do bash -c "echo $(sha256sum $var | awk '{print $1}') > $var.sha256"; done && cd -
    - uses: actions/upload-artifact@v1
      with:
        name: linux
        path: _packages/.
    - uses: Rory-Z/upload-release-asset@v1
      if: github.event_name == 'release'
      with:
        repo: hamler
        path: "_packages/hamler*"
        token: ${{ github.token }}

  build_deb:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        otp: ['23.0']
        ghc: ['8.10.4']
        cabal: ['3.4.0.0']


    container: "ghcr.io/hamler-lang/hamler/base:otp${{ matrix.otp }}-ghc${{ matrix.ghc }}-cabal${{ matrix.cabal }}-debian"

    steps:
    - uses: actions/checkout@v1
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: debian-${{ matrix.ghc }}-${{ matrix.cabal }}-v1-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
        restore-keys: |
          debian-${{ matrix.ghc }}-${{ matrix.cabal }}-v1-
    - name: make
      run: |
        cabal update
        make pkg
        cd deploy/packages/deb/_packages && for var in $(ls *.deb); do bash -c "echo $(sha256sum $var | awk '{print $1}') > $var.sha256"; done && cd -
        rm -rf /usr/lib/hamler
        rm -rf /usr/bin/hamler
    - name: install pkg
      run: |
        set -x
        dpkg -i deploy/packages/deb/_packages/*.deb
        if [ $(dpkg -l |grep hamler |awk '{print $1}') != "ii" ]; then
            echo "package install error"
            exit 1
        fi
    - name: run tests
      run: |
        mkdir test
        cd test
        hamler init
        hamler build
        hamler run
        echo ":q" | hamler repl
    - name: uninstall pkg
      shell: bash
      run: |
        set -x
        dpkg -r hamler-dbgsym
        dpkg -r hamler
        if [ $(dpkg -l |grep hamler |awk '{print $1}') != "rc" ]; then
            echo "package remove error"
            exit 1
        fi
        dpkg -P hamler-dbgsym
        dpkg -P hamler
        if [ ! -z "$(dpkg -l |grep hamler)" ]; then
            echo "package uninstall error"
            exit 1
        fi
    - uses: actions/upload-artifact@v1
      with:
        name: deb
        path: deploy/packages/deb/_packages/.
    - uses: Rory-Z/upload-release-asset@v1
      if: github.event_name == 'release'
      with:
        repo: hamler
        path: "deploy/packages/deb/_packages/hamler*"
        token: ${{ github.token }}

  build_rpm:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        otp: ['23.0']
        ghc: ['8.10.4']
        cabal: ['3.4.0.0']

    container: "ghcr.io/hamler-lang/hamler/base:otp${{ matrix.otp }}-ghc${{ matrix.ghc }}-cabal${{ matrix.cabal }}-centos"

    steps:
    - uses: actions/checkout@v1
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: centos-${{ matrix.ghc }}-${{ matrix.cabal }}-v1-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
        restore-keys: |
          centos-${{ matrix.ghc }}-${{ matrix.cabal }}-v1-
    - name: make
      run: |
        . /opt/rh/devtoolset-8/enable
        cabal update
        make pkg
        cd deploy/packages/rpm/_packages && for var in $(ls *.rpm); do bash -c "echo $(sha256sum $var | awk '{print $1}') > $var.sha256"; done && cd -
        rm -rf /usr/lib/hamler
        rm -rf /usr/bin/hamler
    - name: install pkg
      run: |
        rpm -ivh deploy/packages/rpm/_packages/*.rpm
        if [ -z $(rpm -q hamler | grep -o hamler) ];then
            echo "package install error"
            exit 1
        fi
    - name: run tests
      run: |
        mkdir test
        cd test
        hamler init
        hamler build
        hamler run
        echo ":q" | hamler repl
    - name: uninstall pkg
      run: |
        rpm -e hamler
        if [ "$(rpm -q hamler)" != "package hamler is not installed" ];then
            echo "package uninstall error"
            exit 1
        fi
    - uses: actions/upload-artifact@v1
      with:
        name: rpm
        path: deploy/packages/rpm/_packages/.
    - uses: Rory-Z/upload-release-asset@v1
      if: github.event_name == 'release'
      with:
        repo: hamler
        path: "deploy/packages/rpm/_packages/hamler*"
        token: ${{ github.token }}

  build_mac:
    runs-on: macos-latest

    strategy:
      matrix:
        ghc: ['8.10.4']
        cabal: ['3.4.0.0']

    steps:
    - uses: actions/checkout@v1
    - name: prepare
      run: |
        brew install gnu-sed erlang@23
        ln -s /usr/local/bin/gsed /usr/local/bin/sed
        echo "/usr/local/opt/erlang@23/bin" >> $GITHUB_PATH
        echo "/usr/local/lib/hamler/bin" >> $GITHUB_PATH
        echo "/usr/local/bin" >> $GITHUB_PATH
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ runner.os }}-${{ matrix.ghc }}-${{ matrix.cabal }}-v1-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.ghc }}-${{ matrix.cabal }}-v1-
    - name: Setup PATH
      run: |
        echo "$HOME/.ghcup/bin" >> $GITHUB_PATH
        echo "$HOME/.cabal/bin" >> $GITHUB_PATH
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Setup Haskell
      env:
        BOOTSTRAP_HASKELL_NONINTERACTIVE: 1
        BOOTSTRAP_HASKELL_GHC_VERSION: ${{ matrix.ghc }}
        BOOTSTRAP_HASKELL_CABAL_VERSION: ${{ matrix.cabal }}
      run: |
        wget -nv --no-check-certificate https://get-ghcup.haskell.org -O ghcup.sh
        chmod +x ghcup.sh
        ./ghcup.sh
    - name: make hamler
      env:
        HAMLER_HOME: /usr/local/lib/hamler
      run: |
        sudo mkdir -p $HAMLER_HOME/bin
        cabal run hamler build -- -l -e
        cabal run hamler testDev
        cabal install --overwrite-policy=always
        sudo cp ~/.cabal/bin/hamler /usr/local/bin
        sudo cp ~/.cabal/bin/hamler $HAMLER_HOME/bin
        sudo cp repl/replsrv $HAMLER_HOME/bin/replsrv
        sudo cp -r ebin  $HAMLER_HOME
        sudo cp -r lib  $HAMLER_HOME
        rm -rf ~/.cabal/bin/hamler
    - name: tests
      run: |
        mkdir test
        cd test
        hamler init
        hamler build
        hamler run
        echo ":q" | hamler repl
    - name: create tgz file
      run: |
        version=$(git describe --tags --always)
        cd /usr/local/lib && sudo tar cvf hamler-${version}.tgz hamler && cd -
        mkdir -p _packages
        sudo mv /usr/local/lib/hamler-${version}.tgz _packages
    - uses: actions/upload-artifact@v1
      with:
        name: mac
        path: _packages/.
    - name: set aws cli
      if: github.event_name == 'release'
      run: |
        aws configure set aws_access_key_id ${{ secrets.AwsAccessKeyId }}
        aws configure set aws_secret_access_key ${{ secrets.AwsSecretAccessKey }}
        aws configure set default.region us-west-2
    - name: set git access
      if: github.event_name == 'release'
      run: |
        echo "https://rory-z%40outlook.com:${{ secrets.AccessToken }}@github.com" >> ~/.git-credentials
        git config --global credential.helper store
        git config --global user.name "Rory Z"
        git config --global user.email rory-z@outlook.com
    - name: update homebrew
      if: github.event_name == 'release'
      run: |
        git clone https://github.com/hamler-lang/homebrew-hamler homebrew-hamler
        version=$(git describe --tags --always)
        pkg=hamler-${version}.tgz
        aws s3 cp _packages/$pkg s3://packages.emqx/hamler/homebrew/
        download="https://s3-us-west-2.amazonaws.com/packages.emqx/hamler/homebrew/$pkg"
        sha256=$(openssl dgst -sha256 _packages/$pkg | awk '{print $2}')
        cd homebrew-hamler
        gsed -i "/url/c\  url \"$download\"" ./Formula/hamler.rb
        gsed -i "/sha256/c\  sha256 \"$sha256\"" ./Formula/hamler.rb
        gsed -i "/version /c\  version \"${version##v}\"" ./Formula/hamler.rb
        git add ./Formula/hamler.rb
        git commit -m "chore: update $version"
        git push origin master
        if [ ! -z "$(git show-ref --tags | grep -o -E "refs/tags/$version$")" ];then
          git tag -d ${version}
          git push origin :refs/tags/${version}
        fi
        git tag $version
        git push origin $version

  build_docker:
      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v1
      - name: make docker image
        run: make docker
      - name: push docker image
        if: github.event_name == 'release'
        run: |
          echo ${{ secrets.DockerHubPassword }} | docker login -u ${{ secrets.DockerHubUser }} --password-stdin
          version=$(git describe --tags --always)
          docker push hamlerlang/hamler:$version
