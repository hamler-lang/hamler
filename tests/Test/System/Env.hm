module Test.System.Env where

import Test.QuickCheck (TestGroup(..), TestResult, checkIO)
import Prelude (IO, Maybe(..), bind, discard, return, ($), (==))
import System.Env (getAllEnv, getEnv, lookupEnv, setEnv, unsetEnv)
import Data.List (member)

setEnv_getEnv :: IO Boolean
setEnv_getEnv = do
  setEnv "hamlertest" "hamlertest"
  v <- getEnv "hamlertest"
  return $ v == "hamlertest"

getAllEnv' :: IO Boolean
getAllEnv' = do
  all <- getAllEnv
  return $ ("hamlertest", "hamlertest") `member` all

unsetEnv' :: IO Boolean
unsetEnv' = do
  unsetEnv "hamlertest"
  v <- lookupEnv "hamlertest"
  return $ v == Nothing

test :: TestGroup (Integer -> IO TestResult)
test = Exe [ checkIO "setEnv getEnv" setEnv_getEnv
           , checkIO "getAllEnv"     getAllEnv'
           , checkIO "unsetEnv lookupEnv" unsetEnv'
           ]

