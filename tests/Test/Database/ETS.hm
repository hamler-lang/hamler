module Test.Database.ETS where

import Prelude (IO, Maybe(..), Unit, bind, discard, pure, range, return, seqio, spawn, ($), (&&), (*), (+), (==), concat, foldl, (<>), length, zip, unit)
import Database.ETS (all, file2tab, deleteTable, insert, insertObjects, lookup, member, new, options)
import Database.ETS as E
import Test.QuickCheck (TestGroup(..), TestResult, quickCheck, quickCheck1)
import Control.Process (timerSleep)
import System.FilePath (isFile)
import System.Dir (deleteFile)

test :: TestGroup (Integer -> IO TestResult)
test = Exe [ quickCheck1 "new, deleteTable" new'
           , quickCheck1 "ets: new, insert, insertObjects, lookupElement, lookup, delete, member, last, match" new'
           , quickCheck1 "ets: spawn 40 process to insert tuple (k, 100)" spawn100Oper
           , quickCheck1 "table to file, file to table, first, last, next, prev, tab2list, rename, whereis, take " etsFile
           , quickCheck  "table: foldl, foldr" efold
           , quickCheck  "table: match, matchWithLimit, matchContinuation, matchDelete" ematch
           , quickCheck1 "table: matchObject, matchObjectContinuation, matchObjectWithLimit" ematchObj
           , quickCheck1 "table: updateElement, updateElementList, updateCounter... " updateFun
           ]

new' :: Integer -> Integer -> IO Boolean
new' a b = do
  tab <- new :test1 E.options
  allTid <- all
  deleteTable tab
  return true

etsOper :: IO Boolean
etsOper = do
  tab <- new :test1 options
  ib <- insert tab (1,1)
  iob <- insertObjects tab [(x,x) | x <- [2..10]]
  v0 <- E.lookupElement tab 10 0
  v <- lookup tab  10
  E.delete tab 10
  v1 <- lookup tab 10
  b <- member tab 4
  l <- E.last tab
  mv <- E.match tab (1, :"$1")
  mv1 <- E.match tab (:_, :"$1")
  deleteTable tab
  return $ ib && iob && b && v == [(10, 10)] && v0 == 10
              && v1 == ([] :: [(Integer,Integer)])
              && l == Just 10 && mv == [[1]]
              && mv1 == [[x] | x <- [1..10] ]

insertRandomNumber :: Integer -> E.TableId -> IO ()
insertRandomNumber i tab = do
  E.insert tab (i, 100)
  return ()
  -- timerSleep 30
  -- insertRandomNumber (i+1) tab

spawn100Oper :: IO Boolean
spawn100Oper = do
  tab <- E.new :test1 E.options{access = E.Public, writeConcurrency = true}
  seqio [spawn $ insertRandomNumber (x*10000000) tab | x <- [1..100]]
  timerSleep 500
  v <- E.info tab
  case v of
    Just info -> do
      return $ info.size == 100
    Nothing -> return false

etsFile :: IO Boolean
etsFile = do
  tab <- E.new :test2 E.options
  E.insert tab (1,2)
  E.tab2file tab "testETS"
  v <- isFile "testETS"
  deleteTable tab
  tab1 <- file2tab "testETS"
  v1 <- lookup tab1 1
  v2 <- E.first tab1
  v3 <- E.last tab1
  v4 <- E.next tab1 1
  v5 <- E.prev tab1 1
  v6 <- E.tab2list tab
  vname <- E.rename tab :testA
  tab2 <- E.whereis vname
  v7 <- E.take tab2 1
  (v8 :: [(Integer, Integer)]) <- E.lookup tab2 1
  deleteTable tab2
  deleteFile "testETS"
  return $ v && v1 == [(1,2)] && v2 == Just 1
             && v3 == Just 1 && v4 == Nothing
             && v5 == Nothing && v6 == [(1,2)]
             && v7 == [(1,2)] && v8 == []

efold :: [Integer] -> IO Boolean
efold [] = return true
efold xs = do
  tab <- E.new :test3 E.options
  let total = foldl (+) 0 xs
      len = length xs
  E.insertObjects tab $ zip [1..len] xs
  accl <- E.foldl (\(_, v) b -> v + b ) 0 tab
  accr <- E.foldr (\(_, v) b -> v + b ) 0 tab
  deleteTable tab
  return $ accl == total && accr == total

p :: Atom
p = :"$1"

p' :: (Atom, Atom)
p' = (:_, :_)

ematch :: [Integer] -> IO Boolean
ematch [] = return true
ematch xs = do
  tab <- E.new :test41 E.options
  let total = foldl (+) 0 xs
      len = length xs
  E.insertObjects tab $ zip [1..len] xs
  xs1 <- E.match tab (:_, p)
  let v1 = foldl (\x y -> x + y) 0 $ concat xs1
  v <- E.matchWithLimit tab (:_, p) 10
  v' <- case v of
    Nothing -> return []
    Just (ss, conval) -> do
      ss' <-  allVals conval
      return $ ss <> ss'
  b <- E.matchDelete tab p'
  (xs' :: [[Integer]]) <- E.match tab (1, p)
  deleteTable tab
  return $ xs' == [] && v1 == total && (foldl (+) 0 (concat v')) == total && b
 where
   allVals con = do
     v <- E.matchContinuation con
     case v of
       Nothing -> return []
       Just (vs, contin) -> do
         vs' <- allVals contin
         return $ vs <> vs'

ematchObj :: IO Boolean
ematchObj = do
  tab <- E.new :test4 E.options
  E.insertObjects tab [(x,x) | x <- [1..100]]
  xs <- E.matchObject tab (1, :_)
  v <- E.matchObjectWithLimit tab (:_, :_) 10
  v' <- case v of
    Nothing -> return []
    Just (ss, conval) -> do
      ss' <- allObjs conval
      return $ ss <> ss'
  deleteTable tab
  let vend = foldl (\acc (_, val) -> val + acc) 0 v'
  return $ xs == [(1,1)]  && vend == 5050
 where
   allObjs con = do
     v <- E.matchObjectContinuation con
     case v of
       Nothing -> return []
       Just (vs, contin) -> do
         vs' <- allObjs contin
         return $ vs <> vs'

updateFun :: IO Boolean
updateFun = do
  tab <- E.new :test5 E.options
  E.insertObjects tab [(x,x) | x <- [1..100]]
  v0 <- E.lookup tab 1
  b1 <- E.updateElement tab 1 2 2
  v1 <- E.lookup tab 1

  b2 <- E.updateElementList tab 1 [(2,3), (2,4)]
  v2 <- E.lookup tab 1

  b3 <- E.updateCounter tab 1 (2,3)
  v3 <- E.lookup tab 1

  b4 <- E.updateCounterWithThreshold tab 1 (2,3,8,1)
  v4 <- E.lookup tab 1

  b5 <- E.updateCounterWithThreshold tab 1 (2,3,8,1)
  v5 <- E.lookup tab 1

  b6 <- E.updateCounterWithDefault tab 1 (2,3) (1,5)
  v6 <- E.lookup tab 1

  b7 <- E.updateCounterWithDefault tab 10000 (2,3) (1,5)
  v7 <- E.lookup tab 10000

  b8 <- E.updateCounterIncr tab 1 2
  v8 <- E.lookup tab 1

  b9 <- E.updateCounterIncrWithDefault tab 1 2 (1, 100)
  v9 <- E.lookup tab 1

  b10 <- E.updateCounterIncrWithDefault tab 1001 2 (1, 100)
  v10 <- E.lookup tab 1001

  return $ v0 == [(1,1)]
         && b1 && v1 == [(1,2)]
         && b2 && v2 == [(1,4)]
         && b3 ==7 && v3 == [(1,7)]
         && b4 ==1 && v4 == [(1,1)]
         && b5 ==4 && v5 == [(1,4)]
         && b6 ==7 && v6 == [(1,7)]
         && b7 ==8 && v7 == [(10000,8)]
         && b8 ==9 && v8 == [(1,9)]
         && b9 ==11 && v9 == [(1,11)]
