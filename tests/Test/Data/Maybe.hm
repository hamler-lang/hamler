module Test.Data.Maybe where

import Test.QuickCheck (TestGroup(..), TestResult, quickCheck)
import Prelude
import Data.Maybe (Maybe(..))

nothing :: Maybe Integer
nothing = Nothing

test :: TestGroup (Integer -> IO TestResult)
test = Exe [ quickCheck "show1" (show (Just 2) == "Just 2")
           , quickCheck "show2" (show nothing == "Nothing")
           , quickCheck "eq1" (Just 2 /= nothing)
           , quickCheck "eq2" (Just 2 == Just 2)
           , quickCheck "eq3" (nothing == nothing)
           , quickCheck "eq4" (Just 1 /= Just 2)
           , quickCheck "ord1" (Just 1 > nothing)
           , quickCheck "ord2" (Just 2 > Just 1)
           ]