module Test.Data.Array where


import Test.QuickCheck (TestGroup(..), TestResult, quickCheck)
import Prelude
import Data.Array as A
import Data.Ordering (Ordering(..))

propArrayFt :: [Integer] -> Boolean
propArrayFt xs = A.toList (A.fromList xs) == xs

baseArray :: A.Array Integer
baseArray = A.fromList [1,3,4,5]

baseArray1 :: A.Array Integer
baseArray1 = A.fromList [0, 3, 4, 6]

test :: TestGroup (Integer -> IO TestResult)
test = Exe [ quickCheck "fromList_toList "  propArrayFt
           , quickCheck "fromList"  (A.toList baseArray == [1,3,4,5])
           , quickCheck "get"  (A.get 0 baseArray == 1)
           , quickCheck "set"  (A.set 0 10 baseArray == A.fromList [10,3,4,5])
           , quickCheck "size"  (A.size baseArray == 4)
           , quickCheck "show" (show baseArray == "[1, 3, 4, 5]")
           , quickCheck "eq" (baseArray == baseArray)
           , quickCheck "ord1" (compare baseArray baseArray == EQ)
           , quickCheck "ord2" (compare baseArray baseArray1 == GT)
           ]
