module Test.Data.Array where


import Test.QuickCheck (TestGroup(..), TestResult, quickCheck)
import Prelude
import Data.Array as A

propArrayFt :: [Integer] -> Boolean
propArrayFt xs = A.toList (A.fromList xs) == xs

baseArray :: A.Array Integer
baseArray = A.fromList [1,3,4,5]

--propArrayToList :: A.Array Int -> Bool
--propArrayToList arr = (A.fromList $ A.toList arr) == arr

--propListToArray :: [Int] -> Bool
--propListToArray xs =(A.toList $ A.fromList xs) == xs


test :: TestGroup (Integer -> IO TestResult)
test = Exe [ quickCheck "fromList_toList "  propArrayFt
           , quickCheck "fromList"  (A.toList baseArray == [1,3,4,5])
           , quickCheck "get"  (A.get 0 baseArray == 1)
           , quickCheck "set"  (A.set 0 10 baseArray == A.fromList [10,3,4,5])
           , quickCheck "size"  (A.size baseArray == 4)
           --, quickCheck "Array to List" (propArrayToList)
           --, quickCheck "List to Array" (propListToArray)
           ]

