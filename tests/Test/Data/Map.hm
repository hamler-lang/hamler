module Test.Data.Map where


import Test.QuickCheck (TestGroup(..), TestResult, quickCheck)
import Prelude
import Data.Map as M

propMapPutGet :: M.Map Integer String -> Integer -> String -> Boolean
propMapPutGet m k v = let m1 = M.put k v m
                          v1 = M.get k m1
                      in v == v1

propMapPutMember :: M.Map Integer String -> Integer -> String -> Boolean
propMapPutMember m k v = let m1 = M.put k v m
                      in M.member k m1

propMapFilter :: M.Map Integer Integer -> Integer -> Boolean
propMapFilter m v = let m1 = M.filter (\(k,_) -> k > v) m
                        vs = map (\k -> k > v) $ map fst $  M.toList m1
                    in foldl (&&) true vs


propMapMerge :: M.Map Integer Integer -> M.Map Integer Integer -> Boolean
propMapMerge m1 m2 = M.merge m1 m2 /= M.merge m2 m1

propMapFTList :: M.Map Integer Integer -> Boolean
propMapFTList m = M.fromList (M.toList m) == m

propMapMap :: M.Map Integer Integer -> (Integer -> Integer) -> Boolean
propMapMap m1 f = let l1 = M.toList m1
                      lf = \(k,v) -> (k, f v)
                      lf1 = \(k,v) -> f v
                  in M.fromList (map lf l1) == M.map lf1 m1



test :: TestGroup (Integer -> IO TestResult)
test = Exe [ quickCheck "propMapPutGet "     propMapPutGet
           , quickCheck "propMapPutMember "  propMapPutMember
           , quickCheck "propMapFilter "     propMapFilter
           , quickCheck "propMapMerge "      propMapMerge
           , quickCheck "propMapFTList "     propMapFTList
           , quickCheck "propMapMap "        propMapMap
           ]

