module Test.Data.Map where


import Test.QuickCheck (TestGroup(..), TestResult, quickCheck)
import Prelude
import Data.Map as M

propMapPutGet :: M.Map Integer String -> Integer -> String -> Boolean
propMapPutGet m k v = let m1 = M.put k v m
                          v1 = M.get k m1
                      in v == v1

propMapPutMember :: M.Map Integer String -> Integer -> String -> Boolean
propMapPutMember m k v = let m1 = M.put k v m
                      in M.member k m1

propMapFilter :: M.Map Integer Integer -> Integer -> Boolean
propMapFilter m v = let m1 = M.filter (\(k,_) -> k > v) m
                        vs = map (\k -> k > v) $ map fst $  M.toList m1
                    in foldl (&&) true vs


test :: TestGroup (Integer -> IO TestResult)
test = Exe [ quickCheck "propMapPutGet " propMapPutGet
           , quickCheck "propMapPutMember "  propMapPutMember
         -- , quickCheck "propMapFilter "  propMapFilter
           ]

