module 'Monad' ['applyListImpl'/2,
		'bindImpl'/2,
		'bindListImpl'/2,
		'mapListImpl'/2,
		'module_info'/0,
		'module_info'/1,
		'pureImpl'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[77|[111|[110|[97|[100|[46|[101|[114|[108]]]]]]]]],1}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'mapFun',{'type',24,'fun',[{'type',24,'product',[{'ann_type',24,[{'var',24,'A'}|[{'type',24,'any',[]}]]}]}|[{'ann_type',24,[{'var',24,'B'}|[{'type',24,'any',[]}]]}]]},[]}],
		%% Line 26
		'spec' =
		    %% Line 26
		    [{{'pureImpl',1},[{'type',26,'fun',[{'type',26,'product',[{'type',26,'any',[]}]}|[{'type',26,'any',[]}]]}]}],
		%% Line 29
		'spec' =
		    %% Line 29
		    [{{'bindImpl',2},[{'type',29,'fun',[{'type',29,'product',[{'type',29,'any',[]}|[{'user_type',29,'mapFun',[]}]]}|[{'type',29,'any',[]}]]}]}],
		%% Line 32
		'spec' =
		    %% Line 32
		    [{{'mapListImpl',2},[{'type',32,'fun',[{'type',32,'product',[{'user_type',32,'mapFun',[]}|[{'type',32,'list',[{'type',32,'any',[]}]}]]}|[{'type',32,'list',[{'type',32,'any',[]}]}]]}]}],
		%% Line 35
		'spec' =
		    %% Line 35
		    [{{'applyListImpl',2},[{'type',35,'fun',[{'type',35,'product',[{'type',35,'list',[{'user_type',35,'mapFun',[]}]}|[{'type',35,'list',[{'type',35,'any',[]}]}]]}|[{'type',35,'list',[{'type',35,'any',[]}]}]]}]}],
		%% Line 42
		'spec' =
		    %% Line 42
		    [{{'bindListImpl',2},[{'type',42,'fun',[{'type',42,'product',[{'type',42,'list',[{'type',42,'any',[]}]}|[{'user_type',42,'mapFun',[]}]]}|[{'type',42,'list',[{'type',42,'any',[]}]}]]}]}]]
'pureImpl'/1 =
    %% Line 27
    fun (_0) ->
	_0
'bindImpl'/2 =
    %% Line 30
    fun (_0,_1) ->
	apply _1
	    (_0)
'mapListImpl'/2 =
    %% Line 33
    fun (_0,_1) ->
	call 'lists':'map'
	    (_0, _1)
'applyListImpl'/2 =
    %% Line 36
    fun (_0,_1) ->
	let <_9> =
	    fun (_7) ->
		let <_6> =
		    fun (_3,_2) ->
			%% Line 39
			apply _3
			    (_2)
		in  %% Line 38
		    call 'lists':'foldl'
			(_6, _7, _0)
	in  %% Line 37
	    call 'lists':'map'
		(_9, _1)
'bindListImpl'/2 =
    %% Line 43
    fun (_0,_1) ->
	let <_2> =
	    call 'lists':'map'
		(_1, _0)
	in  call 'lists':'flatten'
		(_2)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('Monad')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('Monad', _0)
end