-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Distributed.Node
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Distributed Node module.
--
-----------------------------------------------------------------------------
module Control.Distributed.Node
  ( Node
  , node
  , nodes
  , nodeOfPid
  , nodeOfPort
  , nodeOfRef
  , selfNode
  , disconnect
    -- * cookie
  , getCookie
  , setCookie
  , isAlive
  , monitorNode
  ) where

import Control.Monad (IO)
import Control.Distributed.Port (Port)
import Data.Atom (atom)
import Data.Maybe (Maybe)
import Data.Ref (Reference)
import Data.Pid (Pid)
import Data.Unit (Unit)
import Foreign (ffiIO0, ffiIO1, ffiIO2)

-- A distributed Node.
type Node = Atom

data NodeType
  = VisibleNode
  | HiddenNode
  | ConnectedNode
  | ThisNode
  | KnownNode

-- String to Node.
node :: String -> Node
node = atom

nodes :: IO [Node]
nodes = ffiIO0 :erlang :nodes

foreign import nodesOf :: NodeType -> IO [Node]

-- Return the name of this node.
selfNode :: IO Node
selfNode = ffiIO0 :erlang :node

nodeOfPid :: Pid -> IO Node
nodeOfPid = ffiIO1 :erlang :node

nodeOfPort :: Port -> IO Node
nodeOfPort = ffiIO1 :erlang :node

nodeOfRef :: Reference -> IO Node
nodeOfRef = ffiIO1 :erlang :node

foreign import disconnect :: Node -> IO (Maybe Boolean)

foreign import getCookie :: IO String

foreign import setCookie :: Node -> String -> IO ()

isAlive :: IO Boolean
isAlive = ffiIO0 :erlang :is_alive

monitorNode :: Node -> Boolean -> IO ()
monitorNode = ffiIO2 :erlang :monitor_node

