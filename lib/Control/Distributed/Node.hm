-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Distributed.Node
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Distributed Node module.
--
-----------------------------------------------------------------------------
module Control.Distributed.Node
  ( Cookie
  , Node
  , nodes
  , nodeOfPid
  , nodeOfPort
  , nodeOfRef
  , selfNode
  , disconnect
    -- * cookie
  , getCookie
  , setCookie
  , isAlive
  , monitorNode
  ) where

import Control.Monad (IO)
import Control.Distributed.Port (Port)
import Data.Maybe (Maybe)
import Data.Ref (Reference)
import Data.Pid (Pid)
import Data.Unit (Unit)

type Cookie = String

-- A distributed Node.
type Node = String

data NodeType
  = VisibleNode
  | HiddenNode
  | ConnectedNode
  | ThisNode
  | KnownNode

foreign import nodes :: IO [Node]

foreign import nodesOf :: NodeType -> IO [Node]

-- Return the name of this node.
foreign import selfNode :: IO Node

foreign import nodeOfPid :: Pid -> IO Node

foreign import nodeOfPort :: Port -> IO Node

foreign import nodeOfRef :: Reference -> IO Node

foreign import disconnect :: Node -> IO (Maybe Boolean)

foreign import getCookie :: IO String

foreign import setCookie :: Node -> String -> IO ()

foreign import isAlive :: IO Boolean

foreign import monitorNode :: Node -> Boolean -> IO Boolean

