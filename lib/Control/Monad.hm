-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Monad
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Monad typeclass.
--
-----------------------------------------------------------------------------
module Control.Monad
  ( class Monad, bind, (>>=), return
  , liftM1, liftM2, liftM3, liftM4
  , IO
  , discard
  , guardF
  , seqio
  , module Data.Functor
  , module Control.Applicative
  ) where

import Data.Functor (class Functor, map)
import Control.Applicative (class Applicative, apply, pure)

class Applicative m => Monad m where
  bind :: forall a b. m a -> (a -> m b) -> m b
  return :: forall a. a -> m a

infixl 1 bind as >>=

instance Monad List where
  bind a f = bindListImpl a f
  return = pure

foreign import bindListImpl :: forall a b. [a] -> (a -> [b]) -> [b]

foreign import data IO :: Type -> Type

instance Functor IO where
  map f a = apply (pure f) a

instance Applicative IO where
  apply f a = do
    f' <- f
    a' <- a
    pure (f' a')
  pure = pureImpl

instance Monad IO where
  bind = bindImpl
  return = pure

foreign import bindImpl :: forall a b. IO a -> (a -> IO b) -> IO b
foreign import pureImpl :: forall a. a -> IO a

-----------------------------------------------------------------------------
-- | Lift a function to a monad

liftM1 :: forall a b m. Monad m => (a -> b) -> m a -> m b
liftM1 f ma = do
  a <- ma
  return (f a)

liftM2 :: forall a b c m. Monad m => (a -> b -> c) -> m a -> m b -> m c
liftM2 f ma mb = do
  a <- ma
  b <- mb
  return (f a b)

liftM3 :: forall a b c d m. Monad m => (a -> b -> c -> d) -> m a -> m b -> m c -> m d
liftM3 f ma mb mc = do
  a <- ma
  b <- mb
  c <- mc
  return (f a b c)

liftM4 :: forall a b c d e m. Monad m => (a -> b -> c -> d -> e) -> m a -> m b -> m c -> m d -> m e
liftM4 f ma mb mc md = do
  a <- ma
  b <- mb
  c <- mc
  d <- md
  return (f a b c d)

-- TODO:...
discard :: forall f a b. Monad f => f a -> (a -> f b) -> f b
discard = bind

guardF :: Boolean  -> [Boolean]
guardF true = [true]
guardF false = []


foreign import seqio ::forall a.[IO a] -> IO [a]
