-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Monad
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Monad Module.
--
-----------------------------------------------------------------------------
module Control.Monad where

class Functor f where
  map :: forall a b. (a -> b) -> f a -> f b

class Functor f => Apply f where
  apply :: forall a b. f (a -> b) -> f a -> f b

class Apply f => Applicative f where
  pure :: forall a. a -> f a

class Apply m => Bind m where
  bind :: forall a b. m a -> (a -> m b) -> m b

class (Applicative m, Bind m) => Monad m

infixl 1 bind as >>=

foreign import data IO :: Type -> Type

instance Functor IO where
  map f a = apply (pure f) a

instance Apply IO where
  apply f a = do
    f' <- f
    a' <- a
    pure (f' a')

instance Applicative IO where
  pure = pureImpl

instance Bind IO where
  bind = bindImpl

instance Monad IO

foreign import bindImpl :: forall a b. IO a -> (a -> IO b) -> IO b
foreign import pureImpl :: forall a. a -> IO a

