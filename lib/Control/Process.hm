-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Process
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Process module.
--
-----------------------------------------------------------------------------
module Control.Process
  ( self
  , selfPid
  , isAlive
    -- * send/recv
  , send
  , recv
  , receiveAfter
    -- * Registered Processes
  , register
  , unregister
  , registered
  , whereis
    -- * Linking and Monitoring
  , link
  , unlink
  , monitor
  , demonitor
    -- * Process Flags
  , processFlag
  , trapExit
    -- * Process Info
  , processInfo
    -- * Process Termination
  , exit
  , kill
    -- * Process Dictionary
  , module Control.Process.Dict
    -- * Process Flags
  , module Control.Process.Flags
  , module Control.Process.Infos
    -- * Spawn Process
  , module Control.Process.Spawn
  , module Control.Process.Types
  ) where

import Control.Monad (IO, (>>=))
import Control.Process.Dict (erase, eraseAll)
import Control.Process.Flags (Flag)
import Control.Process.Infos (ProcessInfo)
import Control.Process.Spawn
  ( Option(..)
  , spawn
  , spawnAt
  , spawnWith
  , spawnAtWith
  , spawnLink
  , spawnLinkAt
  , spawnLinkWith
  , spawnLinkAtWith
  , spawnMonitor
  , spawnMonitorAt
  , spawnMonitorWith
  , spawnMonitorAtWith
  )
import Control.Process.Types
import Data.Maybe (Maybe)
import Data.Pid (Pid)
import Data.Ref (Reference)
import Data.Unit (Unit)
import Foreign (ffiIO0, ffiIO1, ffiIO2)

-- An alias of selfPid.
self :: Process Pid
self = selfPid

-- Return the Pid of calling process.
foreign import selfPid :: Process Pid

isAlive :: Pid -> Process Boolean
isAlive = ffiIO1 :erlang :is_process_alive

-----------------------------------------------------------------------------
-- | Message passing
-----------------------------------------------------------------------------

-- Send a message to a Process.
foreign import send :: forall a. Pid -> a -> Process a

infixr 1 sendc as !
--- send pid1 ! send pid2 ! send pid3 ! send pid4  ! pure message
sendc :: forall a. (a -> Process a) -> Process a -> Process a
sendc f a = a >>= f

foreign import recv :: forall a. Process a

foreign import receiveAfter :: forall a. Integer -> Process a

-- foreign import receiveScanlMatch :: forall a b.(a -> Process b) -> Process b

-----------------------------------------------------------------------------
-- | Registered Processes
-----------------------------------------------------------------------------

foreign import register :: Atom -> Pid -> Process ()

unregister :: Atom -> Process ()
unregister = ffiIO1 :erlang :unregister

registered :: Process [Atom]
registered = ffiIO0 :erlang :registered

foreign import whereis :: Atom -> Process (Maybe Pid)

-----------------------------------------------------------------------------
-- | Linking and Monitoring
-----------------------------------------------------------------------------

link :: Pid -> Process ()
link = ffiIO1 :erlang :link

unlink :: Pid -> Process ()
unlink = ffiIO1 :erlang :unlink

foreign import monitor :: Pid -> Process Reference

demonitor :: Reference -> IO ()
demonitor = ffiIO1 :erlang :demonitor

demonitorWith :: Reference -> [Atom] -> IO Boolean
demonitorWith = ffiIO2 :erlang :demonitor

-----------------------------------------------------------------------------
-- | Process Flags
-----------------------------------------------------------------------------

-- | Set process flag, and return the old value.
foreign import processFlag :: Flag -> Process Flag

-- | Set trap_exit flag of Process.
foreign import trapExit :: Boolean -> Process Boolean

-----------------------------------------------------------------------------
-- | Process Info
-----------------------------------------------------------------------------

foreign import processInfo :: Pid -> Process (Maybe ProcessInfo)

-----------------------------------------------------------------------------
-- | Process GC and Hibernate
-----------------------------------------------------------------------------

garbageCollect :: Process ()
garbageCollect = ffiIO0 :erlang :garbage_collect

garbageCollectProc :: Pid -> Process ()
garbageCollectProc = ffiIO1 :erlang :garbage_collect

data GcOption = GcMajor | GcMinor | GcAsync Reference

foreign import garbageCollectProcWith :: Pid -> [GcOption] -> Process ()

-- erlang:hibernate(Module, Function, Args) -> no_return()

-----------------------------------------------------------------------------
-- | Process Group Leader
-----------------------------------------------------------------------------

groupLeader :: Process Pid
groupLeader = ffiIO0 :erlang :group_leader

isGroupLeader :: Pid -> Pid -> Process Boolean
isGroupLeader = ffiIO2 :erlang :group_leader

-----------------------------------------------------------------------------
-- | Process Termination
-----------------------------------------------------------------------------

exit :: forall r. r -> Process ()
exit = ffiIO1 :erlang :exit

-- TODO:
-- exit(Pid, Reason) -> true

foreign import kill :: Pid -> Process ()

resume :: Pid -> Process ()
resume = ffiIO1 :erlang :resume_process

suspend :: Pid -> Process ()
suspend = ffiIO1 :erlang :suspend_process

yield :: Process ()
yield = ffiIO0 :erlang :yield

