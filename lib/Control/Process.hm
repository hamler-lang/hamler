-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Process
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Erlang Process Module.
--
-----------------------------------------------------------------------------
module Control.Process
  ( Node
  , Module
  , Process
  , node
  --, mod
  , self
  , selfPid
  , selfNode
  , spawn
  , send
  , receive
  , receiveAfter
  , link
  , monitor
  , isProcessAlive
  , trapExit
  ) where

import Control.Monad
import Data.Pid (Pid)
import Data.Ref (Reference)

-- Erlang Node.
type Node = Atom

-- Erlang Module.
type Module = Atom

-- An alias of IO.
type Process = IO

-- String to Node
foreign import node :: String -> Node

-- String to Module
foreign import mod :: String -> Module

-- An alias of selfPid.
self :: Process Pid
self = selfPid

-- Return the Pid of calling process.
foreign import selfPid :: Process Pid

-- Return the name of this node.
foreign import selfNode :: Process Node

-- Spawn a Process.
foreign import spawn ::forall a b. (a -> IO b) -> a -> Process Pid

-- Send a message to a Process.
foreign import send :: forall a. Pid -> a -> Process a

infixr 1 sendc as !
--- send pid1 ! send pid2 ! send pid3 ! send pid4  ! pure message
sendc :: forall a.(a -> Process a) -> Process a -> Process a
sendc f a = a >>= f

foreign import receive :: forall a. Process a

foreign import receiveAfter :: forall a. Integer -> Process a

-- foreign import receiveScanlMatch :: forall a b.(a -> Process b) ->Process b

foreign import link :: Pid -> Process Boolean

foreign import monitor :: Pid -> Process Reference

foreign import isProcessAlive :: Pid -> Process Boolean

foreign import trapExit :: Boolean -> Process Boolean

