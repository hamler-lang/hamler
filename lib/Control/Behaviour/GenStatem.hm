-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Behaviour.GenStatem
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The GenStatem Behaviour.
--
-----------------------------------------------------------------------------
module Control.Behaviour.GenStatem
  ( class GenStatem
  , handleEvent
    -- * start and stop
  , startFSM
  , startLink
  , startMonitor
  , shutdownFSM
  , stopFSM
    -- * client apis
  , call
  , callTimeout
  , cast
    -- * helper funcs
  , replyTo
  , module Control.Behaviour.GenStatem.Types
  ) where

import Control.Behaviour.GenStatem.Types
import Control.Process (Process)
import Control.Process.Types (From, ExitReason)
import Data.Pid (Pid)
import Data.Ref (Ref)
import Data.Timeout (Timeout)
import Data.Unit (Unit)

class GenStatem e s | e -> s, s -> e where
  handleEvent :: e -> s -> Process s

foreign import startFSM
  :: forall a e s. GenStatem e s
   => (a -> Process s) -> a -> Process Pid

foreign import startLink
  :: forall a e s. GenStatem e s
   => (a -> Process s) -> a -> Process Pid

foreign import startMonitor
  :: forall a e s. GenStatem e s
  => (a -> Process s) -> a -> Process (Pid, Ref)

-- Shutdown the Statem Process.
foreign import shutdownFSM
  :: StatemRef -> ExitReason -> Timeout -> Process ()

-- Stop the Statem Process.
foreign import stopFSM :: StatemRef -> Process ()

foreign import call
  :: forall req rep. StatemRef -> req -> Process rep

foreign import callTimeout
  :: forall req rep. StatemRef -> req -> Timeout -> Process rep

foreign import cast
  :: forall msg. StatemRef -> msg -> Process ()

foreign import replyTo
  :: forall rep. From -> rep -> Process ()

