-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Behaviour.GenStatem
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The GenStatem Behaviour.
--
-----------------------------------------------------------------------------
module Control.Behaviour.GenStatem
  ( class GenStatem
  , HandleEvent
  , handleEvent
    -- * start and stop
  , start
  , startWith
  , startLink
  , startLinkWith
  , startMonitor
  , startMonitorWith
  , stop
  , stopWith
    -- * client apis
  , call
  , callTo
  , callTimeout
  , cast
  , castTo
    -- * helper funcs
  , replyTo
  , module Control.Behaviour.GenStatem.Types
  ) where

import Control.Behaviour.GenStatem.Types
import Control.Process (Process, ExitReason)
import Data.Pid (Pid)
import Data.Ref (Reference)
import Data.Timeout (Timeout)
import Data.Unit (Unit)

type HandleEvent e st
  = e -> st -> Process (StatemAction st)

class GenStatem e st | e -> st, st -> e where
  handleEvent :: HandleEvent e st

foreign import start
  :: forall e st. GenStatem e st => (Init st) -> Process Pid

foreign import startWith
  :: forall e st. GenStatem e st => Name -> (Init st) -> Process Pid

foreign import startLink
  :: forall e st. GenStatem e st => (Init st) -> Process Pid

foreign import startLinkWith
  :: forall e st. GenStatem e st => Name -> (Init st) -> Process Pid

foreign import startMonitor
  :: forall e st. GenStatem e st => (Init st) -> Process (Pid, Reference)

foreign import startMonitorWith
  :: forall e st. GenStatem e st
  => Name -> (Init st) -> Process (Pid, Reference)

-- Stop the Statem Process.
foreign import stop :: StatemRef -> Process ()

-- Stop the Statem Process with ExitReason.
foreign import stopWith
  :: StatemRef -> ExitReason -> Timeout -> Process ()

foreign import call
  :: forall req rep. StatemRef -> req -> Process rep

-- | Synchronous call to the Server process directly.
foreign import callTo
  :: forall req rep. Pid -> req -> Process rep

foreign import callTimeout
  :: forall req rep. StatemRef -> req -> Timeout -> Process rep

foreign import cast
  :: forall msg. StatemRef -> msg -> Process ()

-- | Sends an asynchronous request to the Server process directly.
foreign import castTo
  :: forall req. Pid -> req -> Process ()

foreign import replyTo
  :: forall rep. Caller -> rep -> Process ()

