-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Behaviour.GenEvent
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The GenEvent Behaviour.
--
-----------------------------------------------------------------------------
module Control.Behaviour.GenEvent
  ( class GenEvent
  , handleEvent
  , startEventMgr
  , notify
  , syncNotify
  , shutdown
  , stop
  , module Control.Behaviour.GenEvent.Types
  ) where

import Control.Behaviour.GenEvent.Types

import Control.Process (Process)
import Data.Pid (Pid)
import Data.Unit (Unit)

class GenEvent e s | e -> s, s -> e where
  handleEvent :: e -> s -> Process s

-- Start an EventMgr.
foreign import startEventMgr
  :: forall a e s. GenEvent e s => (a -> Process s) -> a -> Process Pid

foreign import notify :: forall e. EventMgrRef -> e -> Process ()

foreign import syncNotify :: forall e. EventMgrRef -> e -> Process ()

foreign import shutdown :: forall r. EventMgrRef -> r -> Process ()

foreign import stop :: EventMgrRef -> Process ()

{- TODO
start/0, start/1, start/2,
start_link/0, start_link/1, start_link/2,
add_handler/3, add_sup_handler/3, delete_handler/3, swap_handler/3,
swap_sup_handler/3, which_handlers/1, call/3, call/4
-}
