-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Behaviour.GenEvent
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The GenEvent Behaviour.
--
-----------------------------------------------------------------------------
module Control.Behaviour.GenEvent
  ( class GenEvent
  , HandleEvent
  , handleEvent
    -- * start event mgr
  , start
  , startWith
  , startWithGlobal
  , startLink
  , startLinkWith
  , startLinkWithGlobal
  , stop
  , stopWith
    -- * api
  , addHandler
  , notify
  , notifyTo
  , syncNotify
  , syncNotifyTo
    -- * types
  , module Control.Behaviour.GenEvent.Types
  ) where

import Control.Behaviour.GenEvent.Types
import Control.Process (ExitReason, Process)
import Data.Pid (Pid)
import Data.Timeout (Timeout)
import Data.Unit (Unit)

type HandleEvent e st = e -> st -> Process st

class GenEvent e st | e -> st, st -> e where
  handleEvent :: HandleEvent e st

foreign import start
  :: forall a e st. GenEvent e st
  => (InitHandler a st) -> a -> Process StartRet

foreign import startWith
  :: forall a e st. GenEvent e st
  => Name -> (InitHandler a st) -> a -> Process StartRet

foreign import startWithGlobal
  :: forall a e st. GenEvent e st
  => Name -> (InitHandler a st) -> a -> Process StartRet

foreign import startLink
  :: forall a e st. GenEvent e st
  => (InitHandler a st) -> a -> Process StartRet

foreign import startLinkWith
  :: forall a e st. GenEvent e st
  => Name -> (InitHandler a st) -> a -> Process StartRet

foreign import startLinkWithGlobal
  :: forall a e st. GenEvent e st
  => Name -> (InitHandler a st) -> a -> Process StartRet

foreign import stop :: EMgrRef -> Process ()

foreign import stopWith
  :: EMgrRef -> ExitReason -> Timeout -> Process ()

foreign import addHandler
  :: forall a e st. GenEvent e st
  => EMgrRef -> (InitHandler a st) -> a -> Process ()

foreign import notify
  :: forall e. EMgrRef -> e -> Process ()

foreign import notifyTo
  :: forall e. Pid -> e -> Process ()

foreign import syncNotify
  :: forall e. EMgrRef -> e -> Process ()

foreign import syncNotifyTo
  :: forall e. Pid -> e -> Process ()

{- TODO
add_sup_handler/3,
delete_handler/3,
swap_handler/3,
swap_sup_handler/3,
which_handlers/1
-}
