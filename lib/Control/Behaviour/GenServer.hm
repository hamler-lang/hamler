-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Behaviour.GenServer
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The GenServer Behaviour.
--
-----------------------------------------------------------------------------
module Control.Behaviour.GenServer
  ( class GenServer
  , handleCall
  , handleCast
    -- * start/stop server
  , serverName
  , start
  , startLink
  , startMonitor
  , stop
    -- * helper funcs
  , reply
  , noReply
  , module Control.Behaviour.GenServer.Client
  , module Control.Behaviour.GenServer.Types
  ) where

import Control.Process (Process)
import Control.Process.Types (From)
import Data.Atom (atom)
import Data.Pid (Pid)
import Data.Ref (Ref)
import Data.Unit (Unit)
import Control.Behaviour.GenServer.Client
  ( abcast
  , abcastOn
  , call
  , callTimeout
  , cast
  , multiCall
  , multiCallOn
  )
import Control.Behaviour.GenServer.Types
  ( ServerName
  , ServerRef(..)
  , InitResult(..)
  , HandleResult(..)
  )

class GenServer m s | m -> s, s -> m where
  handleCall :: m -> From -> s -> Process s
  handleCast :: m -> s -> Process s

-- | String to server name.
serverName :: String -> ServerName
serverName = atom

foreign import start
  :: forall a m s. GenServer m s
  => (a -> Process s) -> a -> Process Pid

foreign import startLink
  :: forall a m s. GenServer m s
  => (a -> Process s) -> a -> Process Pid

foreign import startMonitor
  :: forall a m s. GenServer m s
  => (a -> Process s) -> a -> Process (Pid, Ref)

foreign import stop :: ServerRef -> Process ()

foreign import reply
  :: forall a s. From -> a -> s -> Process s

foreign import noReply
  :: forall s. s -> Process s

