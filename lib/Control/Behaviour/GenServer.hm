-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Behaviour.GenServer
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The GenServer Behaviour module.
--
-----------------------------------------------------------------------------
module Control.Behaviour.GenServer
  ( class GenServer, handleCall, handleCast
    -- * start/stop server
  , serverName
  , startServer
  , startLink
  , startMonitor
  , stopServer
    -- * helper funcs
  , reply, noReply
  , module Control.Behaviour.GenServer.Client
  , module Control.Behaviour.GenServer.Types
  , CallHandler, CastHandler
  ) where

import Control.Monad (pure)
import Control.Process (Process)
import Data.Atom (atom)
import Data.Pid (Pid)
import Data.Ref (Ref)
import Data.Unit (Unit)
import Control.Behaviour.GenServer.Client
  ( abcast
  , abcastOn
  , call
  , callTimeout
  , cast
  , multiCall
  , multiCallOn
  )
import Control.Behaviour.GenServer.Types
  ( InitResult(..)
  , ServerName
  , ServerRef(..)
  , ServerAction(..)
  )

type CallHandler req rep st = req -> st -> Process (ServerAction rep st)

type CastHandler req st = req -> st -> Process (ServerAction Unit st)

class GenServer req rep st | req -> rep, rep -> st, st -> req where
  -- req -> st -> Process (ServerAction rep st)
  handleCall :: CallHandler req rep st
  -- req -> st -> Process (ServerAction Unit st)
  handleCast :: CastHandler req st

-- | String to server name.
serverName :: String -> ServerName
serverName = atom

foreign import startServer
  :: forall a req rep st. GenServer req rep st
  => (a -> Process (InitResult st)) -> a -> Process Pid

foreign import startLink
  :: forall a req rep st. GenServer req rep st
  => (a -> Process (InitResult st)) -> a -> Process Pid

foreign import startMonitor
  :: forall a req rep st. GenServer req rep st
  => (a -> Process (InitResult st)) -> a -> Process (Pid, Ref)

foreign import stopServer :: ServerRef -> Process ()

reply :: forall rep st. rep -> st -> Process (ServerAction rep st)
reply rep st = pure (ServerReply rep st)

noReply :: forall st. st -> Process (ServerAction Unit st)
noReply st = pure (ServerNoReply st)

