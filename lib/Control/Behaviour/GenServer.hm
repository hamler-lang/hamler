-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Behaviour.GenServer
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The GenServer Behaviour module.
--
-----------------------------------------------------------------------------
module Control.Behaviour.GenServer
  ( class GenServer
  , handleCall
  , handleCast
    -- * start/stop server
  , server
  , start
  , startWith
  , startLink
  , startLinkWith
  , stop
  , stopWith
    -- * client apis
  , abcast
  , abcastAt
  , call
  , callTo
  , callTimeout
  , cast
  , castTo
  , multiCall
  , multiCallAt
  , sendRequest
    -- * helper funcs
  , replyTo
  , reply
  , noReply
    -- * types
  , HandleCall, HandleCast
  , module Control.Behaviour.GenServer.Types
  ) where

import Control.Behaviour.GenServer.Types
  ( Caller
  , InitHandler
  , InitResult(..)
  , MultiReply(..)
  , RequestId
  , ServerName(..)
  , ServerRef(..)
  , StartRet(..)
  , ServerAction(..)
  )
import Control.Monad (return)
import Control.Process (Node, Process)
import Control.Process.Types (ExitReason)
import Data.Atom (atom)
import Data.Pid (Pid)
import Data.Timeout (Timeout)
import Data.Unit (Unit)
import Foreign (ffiIO2)

type HandleCall req rep st = req -> st -> Process (ServerAction rep st)

type HandleCast req st = req -> st -> Process (ServerAction Unit st)

class GenServer req rep st | req -> rep, rep -> st, st -> req where
  handleCall :: HandleCall req rep st
  handleCast :: HandleCast req st

-- | String to server name.
server :: String -> Atom
server = atom

-- | Start a standalone server process.
foreign import start
  :: forall a req rep st. GenServer req rep st
  => (InitHandler a st) -> a -> Process StartRet

-- | Start a standalone server process with registered name.
foreign import startWith
  :: forall a req rep st. GenServer req rep st
  => ServerName -> (InitHandler a st) -> a -> Process StartRet

-- | Start a standalone server process.
foreign import startLink
  :: forall a req rep st. GenServer req rep st
  => (InitHandler a st) -> a -> Process StartRet

foreign import startLinkWith
  :: forall a req rep st. GenServer req rep st
  => ServerName -> (InitHandler a st) -> a -> Process StartRet

-- | Stop the server process.
foreign import stop :: ServerRef -> Process ()

-- | Stop the server process with exit reason.
foreign import stopWith
  :: ServerRef -> ExitReason -> Timeout -> Process ()

-- | Sends an asynchronous request to the GenServer processes.
foreign import abcast
  :: forall req. ServerName -> req -> Process ()

-- | Sends an asynchronous request to the GenServer processes at the specified nodes.
foreign import abcastAt
  :: forall req. [Node] -> ServerName -> req -> Process ()

-- | Synchronous call to the ServerRef of the GenServer process.
foreign import call
  :: forall req rep. ServerRef -> req -> Process rep

-- | Synchronous call to the Server process directly.
foreign import callTo
  :: forall req rep. Pid -> req -> Process rep

-- | Synchronous call to the ServerRef of the Server process with timeout.
foreign import callTimeout
  :: forall req rep. ServerRef -> req -> Timeout -> Process rep

-- | Sends an asynchronous request to the ServerRef of the Server process.
foreign import cast
  :: forall req. ServerRef -> req -> Process ()

-- | Sends an asynchronous request to the Server process directly.
foreign import castTo
  :: forall req. Pid -> req -> Process ()

foreign import multiCall
  :: forall req rep. ServerName -> req -> Process [MultiReply rep]

foreign import multiCallAt
  :: forall req rep. [Node] -> ServerName -> req -> Process [MultiReply rep]

foreign import multiCallTimeoutAt
  :: forall req rep. [Node] -> ServerName -> req -> Timeout -> Process [MultiReply rep]

foreign import sendRequest
  :: forall req. ServerRef -> req -> Process RequestId

foreign import waitResponse
  :: forall rep. RequestId -> Timeout -> Process rep

-- | Send a reply to the caller explicitly.
replyTo :: forall rep. Caller -> rep -> Process ()
replyTo = ffiIO2 :gen_server :reply

reply :: forall rep st. rep -> st -> Process (ServerAction rep st)
reply rep st = return (ServerReply rep st)

noReply :: forall st. st -> Process (ServerAction Unit st)
noReply st = return (ServerNoReply st)

