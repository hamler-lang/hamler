-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Behaviour.Supervisor
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Supervisor behaviour.
--
-----------------------------------------------------------------------------
module Control.Behaviour.Supervisor
  ( -- * start sup
    startSup
  , startSupWith
    -- * child api
  , checkChildSpecs
  , countChildren
  , deleteChild
  , getChildSpec
  , restartChild
  , startChild
  , terminateChild
  , terminateChildBy
  , whichChildren
    -- * types
  , newChildSpec
  , module Control.Behaviour.Supervisor.Types
  ) where

import Control.Behaviour.Supervisor.Types
import Control.Process (Process)
import Data.Atom (mod)
import Data.Pid (Pid)
import Data.Maybe (Maybe)
import Data.Result (Result)
import Data.Unit (Unit)

-- Start a supervisor process.
foreign import startSup :: Init -> Process Pid

-- Start a supervisor with name.
foreign import startSupWith :: Name -> Init -> Process Pid

-- Check a list of child specification.
foreign import checkChildSpecs
  :: [ChildSpec] -> Process (Result ChildSpecError ())

-- Return counts of children.
foreign import countChildren
  :: SupRef -> Process ChildCounts

-- Delete the child specification identified by Id.
foreign import deleteChild
  :: SupRef -> ChildId -> Process (Result ChildError ())

-- Get the child spec for the child identified by Id.
foreign import getChildSpec
  :: SupRef -> ChildId -> Process (Maybe ChildSpec)

-- Restart a child process.
foreign import restartChild
  :: SupRef -> ChildId -> Process (Result ChildError Child)

-- Start a child process.
foreign import startChild
  :: SupRef -> ChildSpec -> Process (Result ChildError ChildPid)

-- Terminate a child process.
foreign import terminateChild
  :: SupRef -> ChildId -> Process (Result ChildError ())

-- Terminate a child process by Pid.
foreign import terminateChildBy
  :: SupRef -> Pid -> Process (Result ChildError ())

foreign import whichChildren :: SupRef -> Process [ChildId]

newChildSpec :: ChildId -> Process Pid -> ChildSpec
newChildSpec childId startFun =
  { childId = childId
  , startFun = startFun
  , restart = Permanent
  , shutdown = Shutdown 5000
  , childType = Worker
  , modules = [mod(childId)]
  }
