-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Behaviour.Supervisor
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Erlang Supervisor Behaviour.
--
-----------------------------------------------------------------------------
module Control.Behaviour.Supervisor where

import Control.Behaviour.Supervisor.Types
import Control.Process (Module, Node, Process)
import Data.Pid (Pid)
import Data.Maybe (Maybe)
import Data.Result (Result)
import Data.Unit (Unit)

-- Supervisor ref.
data SupRef
  = SupName Atom
    -- ^ The supervisor is locally registered.
  | SupNameOn Atom Node
    -- ^ The supervisor is locally registered at another node.
  | SupGlobal Atom
    -- ^ The supervisor is globally registered.
  | SupNameVia Module Atom
    -- ^ The supervisor is registered through an alternative process registry.
  | SupPid Pid
    -- ^ The supervisor pid.

class Supervisor a s | a -> s where
  init :: a -> Process s

-- Start a Supervisor.
foreign import startSupervisor
  :: forall a s. Supervisor a s => a -> Process Pid

-- Check a list of child specification.
foreign import checkChildSpecs
  :: [ChildSpec] -> Process (Result ChildSpecError ())

-- Return counts of children.
foreign import countChildren
  :: SupRef -> Process ChildCounts

-- Delete the child specification identified by Id.
foreign import deleteChild
  :: SupRef -> ChildId -> Process (Result ChildError ())

-- Get the child spec for the child identified by Id.
foreign import getChildSpec
  :: SupRef -> ChildId -> Process (Maybe ChildSpec)

-- Restart a child process.
foreign import restartChild
  :: SupRef -> ChildId -> Process (Result ChildError Child)

-- Start a child process.
foreign import startChild
  :: SupRef -> ChildSpec -> Process (Result ChildError ChildPid)

-- Terminate a child process.
foreign import terminateChild
  :: SupRef -> ChildId -> Process (Result ChildError ())

-- Terminate a child process by Pid.
foreign import terminateChildByPid
  :: SupRef -> Pid -> Process (Result ChildError ())

foreign import whichChildren
  :: SupRef -> Process [ChildId]

