-----------------------------------------------------------------------------
-- |
-- Module      :  Control.OTP.Application
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Erlang Application Module.
--
-----------------------------------------------------------------------------
module Control.OTP.Application where

import Control.Process (Node, Module, Timeout)
-- import Control.Monad (IO)

type Application = String

data StartType = Normal | Takeover Node | Failover Node

data RestartType = Permanent | Transient | Temporary

-- TODO: {Par :: atom(), Val :: term()}
foreign import data AppEnv :: Type

-- TODO: [{Phase :: atom(), PhaseArgs :: term()}] | 'undefined'}
foreign import data StartPhase :: Type

-- TODO: PhaseArgs :: term()
foreign import data PhaseArgs :: Type

-- TODO: StartArgs :: term()
foreign import data StartArgs :: Type

-- [{name, x}, {vsn, "1.0.0"}]

type AppSpec =
  { name         :: String
  , description  :: String
  , vsn          :: String
  , id           :: String
  , modules      :: List Module
  , registered   :: List String
  , applications :: List Application
  , includedApps :: List Application
  , env          :: List AppEnv
  , startPhases  :: List StartPhase
  , maxT         :: Timeout
  , maxP         :: Timeout
  , appMod       :: Module
  , startArgs    :: StartArgs
  }

{-
foreign import ensureAllStarted :: Application -> IO (List Application)

foreign import ensureAllRestarted :: Application -> RestartType -> IO (List Application)

foreign import start :: Application -> IO Unit

foreign import restart :: Application -> RestartType -> IO Unit

foreign import stop :: Application -> IO Unit

load/1,
load/2,

foreign import unload :: Application -> IO Unit

takeover/2

foreign import whichApplications :: IO (List AppSpec)

which_applications/1,
loaded_applications/0,
permit/2
ensure_started/1,
ensure_started/2]).
set_env/1,
set_env/2,
set_env/3,
set_env/4,
unset_env/2,
unset_env/3,
get_env/1,
get_env/2,
get_env/3,
get_all_env/0,
get_all_env/1
get_key/1,
get_key/2,
get_all_key/0,
get_all_key/1,
get_application/0,
get_application/1,
info/0,
start_type/0

-}
