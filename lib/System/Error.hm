-----------------------------------------------------------------------------
-- |
-- Module      :  System.Error
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- Handle the system Error/Exception.
--
-----------------------------------------------------------------------------
module System.Error where

import Control.Monad (IO, pure, (>>=), bind)
import Data.Function(identity)
import Data.Maybe (Maybe(..))
import Data.Functor (map)
import Data.Either (Either(..))
import Data.Show (class Show)

--
-- foreign import data Error :: Type
--
-- class Show e => Exception e where
--     toException :: e -> SomeException
--     fromException :: SomeException -> Maybe e
--     displayException :: e -> String
--
-- instance Exception SomeException where
--    toException = identity
--    fromException = Just
--    displayException (SomeException e) = displayException e
--
-- instance Show Error where
--   show = showErrorImpl
--
-- foreign import showErrorImpl :: Error -> String
--
-- erlang:raise(Class, Reason, Stacktrace) -> no_return()

throw :: forall a e. e -> IO a
throw s = throwException (displayException s)

try :: forall a e. IO a -> IO (Either e a)
try action = catch (action >>= \x -> pure (Right x)) (\e -> pure (Left e))

catch :: forall a e. IO a -> (e -> IO a) -> IO a
catch io handler = catchException io handler

onException :: forall a b. IO a -> IO b -> IO a
onException io what = io `catch` \e -> do _ <- what
                                          throw e

foreign import bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
bracket before after thing =
try before Z -> ?IO(thing(Z)()) catch X -> throw X after after(Z)()
try io catch _ -> what();?IO(throw)
finally ::
{-
foreign import error :: String -> Error

foreign import message :: Error -> String

foreign import name :: Error -> String
-}

foreign import throwException :: forall a. String -> IO a

foreign import catchException :: forall a. (Error -> IO a) -> IO a -> IO a

{-
throw(Any) -> no_return()

-}
