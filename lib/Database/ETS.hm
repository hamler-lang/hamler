-----------------------------------------------------------------------------
-- |
-- Module      :  Database.ETS
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Erlang ETS Database.
--
-----------------------------------------------------------------------------
module Database.ETS where

import Control.Monad (IO)
import Control.Process (Node, Pid)
import Data.Maybe (Maybe)
import Data.Ref (Reference)
import Foreign

type Table = String

foreign import data TableId :: Type

data AccessType = Public | Protected | Private

data TableType = Set | OrderedSet | Bag | DuplicateBag

type TableOptions =
  { ttype            :: TableType
  , access           :: AccessType
  , named            :: Boolean
  , keyPos           :: Integer
  , readConcurrency  :: Boolean
  , writeConcurrency :: Boolean
  , compressed       :: Boolean
  }

type TableInfo =
  { id               :: Reference
  , name             :: TableId
  , size             :: Integer
  , node             :: Node
  , memory           :: Integer
  , owner            :: Pid
  , namedTable       :: Boolean
  , ttype            :: TableType
  , keypos           :: Integer
  , protection       :: AccessType
  , readConcurrency  :: Boolean
  , writeConcurrency :: Boolean
  , compressed       :: Boolean
  }

foreign import new :: Table -> TableOptions -> IO TableId

all :: IO [TableId]
all = ffiIO0 "ets" "all"

-- | Delete an ETS table
deleteTable :: TableId -> IO Boolean
deleteTable = ffiIO1 "ets" "delete"

-- | Delete a record.
delete :: forall k. TableId -> k -> IO Boolean
delete = ffiIO2 "ets" "delete"

-- | Delete all records of a table.
deleteAllObjects :: TableId -> IO Boolean
deleteAllObjects = ffiIO1 "ets" "delete_all_objects"

deleteObject :: forall a. TableId -> a -> IO Boolean
deleteObject = ffiIO2 "ets" "delete_object"

-- | Displays information about all ETS tables on a terminal.
browse :: IO String
browse = ffiIO0 "ets" "i"

-- | Browses table Tab on a terminal.
browseTable :: TableId -> IO String
browseTable = ffiIO1 "ets" "i"

-- file2tab/1
-- file2tab/2
-- first/1
-- foldl/3
-- foldr/3
-- from_dets/2
-- fun2ms/1
-- give_away/3

foreign import info :: TableId -> IO (Maybe TableInfo)

-- info/2
-- init_table/2

insert :: forall o. TableId -> o -> IO Boolean
insert = ffiIO2 "ets" "insert"

insertObjects :: forall o. TableId -> [o] -> IO Boolean
insertObjects = ffiIO2 "ets" "insert"

insertNew :: forall o. TableId -> o -> IO Boolean
insertNew = ffiIO2 "ets" "insert_new"

insertNewObjects :: forall o. TableId -> [o] -> IO Boolean
insertNewObjects = ffiIO2 "ets" "insert_new"

{-
-- is_compiled_ms/1
-- last/1
lookup/2
lookup_element/3
match/1
match/2
match/3
match_delete/2
match_object/1
match_object/2
match_object/3
match_spec_compile/1
match_spec_run/2
member/2
new/2
next/2
prev/2
rename/2
repair_continuation/2
safe_fixtable/2
select/1
select/2
select/3
select_count/2
select_delete/2
select_replace/2
select_reverse/1
select_reverse/2
select_reverse/3
setopts/2
slot/2
tab2file/2
tab2file/3
tab2list/1
tabfile_info/1
table/1
table/2
take/2
test_ms/2
to_dets/2
update_counter/3
update_counter/4
update_element/3
whereis/1
-}

tNew :: IO TableId
tNew = new "xtab" { ttype: Set,
                    access: Public,
                    named: true,
                    keyPos: 1,
                    compressed: true,
                    readConcurrency : false,
                    writeConcurrency : false
                   }
