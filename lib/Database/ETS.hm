-----------------------------------------------------------------------------
-- |
-- Module      :  Database.ETS
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Erlang ETS Database.
--
-----------------------------------------------------------------------------
module Database.ETS
  ( TableId
  , TableInfo
  , TableName
  , TableAccess(..)
  , TableType(..)
  , TableOptions
  , options
    -- * APIs
  , all
  , delete
  , deleteAllObjects
  , deleteObject
  , deleteTable
  , file2tab
  , first
  , fromDETS
  , giveAway
  , info
  , insert
  , insertObjects
  , insertNew
  , insertNewObjects
  , last
  , lookup
  , lookupElement
  , member
  , new
  , next
  , prev
  , rename
  , tab2file
  , tab2list
  , take
  , toDETS
  , whereis
  ) where

import Control.Monad (IO)
import Data.Pid (Pid)
import Data.Maybe (Maybe(..))
import Data.Ref (Reference)
import Data.Term (Term)
import Data.Unit (Unit)
import Foreign (ffiIO0, ffiIO1, ffiIO2, ffiIO3)
import System.IO (FilePath)

-- | Table name is an Atom.
type TableName = Atom

-- TableId Reference | TableName Atom
foreign import data TableId :: Type

data TableAccess = Public | Protected | Private

data TableType = Set | OrderedSet | Bag | DuplicateBag

type TableOptions =
  { tableType        :: TableType
  , access           :: TableAccess
  , namedTable       :: Boolean
  , keyPos           :: Integer
  , heir             :: Maybe (Pid, Term)
  , compressed       :: Boolean
  , readConcurrency  :: Boolean
  , writeConcurrency :: Boolean
--, decentralizedCounters :: Boolean
  }

type TableInfo =
  { id               :: Reference
  , name             :: Atom
  , size             :: Integer
  , node             :: Atom
  , memory           :: Integer
  , owner            :: Pid
  , heir             :: Maybe Pid
  , tableType        :: TableType
  , namedTable       :: Boolean
  , keypos           :: Integer
  , protection       :: TableAccess
  , compressed       :: Boolean
  , readConcurrency  :: Boolean
  , writeConcurrency :: Boolean
--, decentralizedCounters :: Boolean
  }

options :: TableOptions
options = { tableType = Set
          , access = Protected
          , namedTable = true
          , keyPos = 1
          , heir = Nothing
          , compressed = false
          , readConcurrency = false
          , writeConcurrency = false
          }

all :: IO [TableId]
all = ffiIO0 :ets :all

-- | Displays information about all ETS tables on a terminal.
browse :: IO String
browse = ffiIO0 :ets :i

-- | Browses table Tab on a terminal.
browseTable :: TableId -> IO String
browseTable = ffiIO1 :ets :i

-- | Delete the entire table.
deleteTable :: TableId -> IO ()
deleteTable = ffiIO1 :ets :delete

-- | Delete a record.
delete :: forall k. TableId -> k -> IO ()
delete = ffiIO2 :ets :delete

-- | Delete all records of a table.
deleteAllObjects :: TableId -> IO ()
deleteAllObjects = ffiIO1 :ets :delete_all_objects

deleteObject :: forall o. TableId -> o -> IO ()
deleteObject = ffiIO2 :ets :delete_object

foreign import file2tab :: FilePath -> IO TableId

-- TODO: file2tab(FilePath, Options) -> {ok, Tab} | {error, Reason}

foreign import first :: TableId -> forall k. IO (Maybe k)

-- TODO: foldl/3
-- TODO: foldr/3

fromDETS :: TableId -> TableName -> IO ()
fromDETS = ffiIO2 :ets :from_dets

-- TODO: fun2ms/1

giveAway :: forall a. TableId -> Pid -> a -> IO ()
giveAway = ffiIO3 :ets :give_away

foreign import info :: TableId -> IO (Maybe TableInfo)

-- TODO: info/2
-- TODO: init_table/2

insert :: forall v. TableId -> v -> IO ()
insert = ffiIO2 :ets :insert

insertObjects :: forall v. TableId -> [v] -> IO Boolean
insertObjects = ffiIO2 :ets :insert

insertNew :: forall v. TableId -> v -> IO Boolean
insertNew = ffiIO2 :ets :insert_new

insertNewObjects :: forall v. TableId -> [v] -> IO Boolean
insertNewObjects = ffiIO2 :ets :insert_new

foreign import last :: forall k. TableId -> IO (Maybe k)

lookup :: forall k v. TableId -> k -> IO [v]
lookup = ffiIO2 :ets :lookup

lookupElement :: forall k v. TableId -> k -> Integer -> IO v
lookupElement = ffiIO3 :ets :lookup_element

member :: forall k. TableId -> k -> IO Boolean
member = ffiIO2 :ets :member

-- | Creates a new table.
foreign import new :: Atom -> TableOptions -> IO TableId

foreign import next :: forall k. TableId -> k -> IO (Maybe k)

foreign import prev :: forall k. TableId -> k -> IO (Maybe k)

rename :: TableId -> Atom -> IO Atom
rename = ffiIO2 :ets :rename

foreign import tab2file :: TableId -> FilePath -> IO ()

tab2list :: forall v. TableId -> IO [v]
tab2list = ffiIO1 :ets :tab2list

take :: forall k v. TableId -> k -> IO [v]
take = ffiIO2 :ets :take

toDETS :: TableId -> Atom -> IO Atom
toDETS = ffiIO2 :ets :to_dets

whereis :: Atom -> IO TableId
whereis = ffiIO1 :ets :whereis

{- TODO:
is_compiled_ms/1
match/1
match/2
match/3
match_delete/2
match_object/1
match_object/2
match_object/3
match_spec_compile/1
match_spec_run/2
repair_continuation/2
safe_fixtable/2
select/1
select/2
select/3
select_count/2
select_delete/2
select_replace/2
select_reverse/1
select_reverse/2
select_reverse/3
setopts/2
slot/2
tab2file/2
tab2file/3
tab2list/1
tabfile_info/1
table/1
table/2
take/2
test_ms/2
to_dets/2
update_counter/3
update_counter/4
update_element/3
-}
