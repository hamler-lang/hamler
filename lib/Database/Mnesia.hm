-----------------------------------------------------------------------------
-- |
-- Module      :  Database.Mnesia
-- Copyright   :  (c) Feng Lee 2020
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Erlang Mnesia Database.
--
-----------------------------------------------------------------------------
module Database.Mnesia
  ( AccessMode(..)
  , Activity(..)
  , LockKind(..)
  , StorageType(..)
  , Table
  , TableOptions
  , addTableCopy
  , addTableIndex
  , createTable
  , createSchema
  , delTableCopy
  , delTableIndex
  , delete
  , deleteWithLock
  , deleteObject
  , deleteObjectWithLock
  , deleteSchema
  , dirtyAllKeys
  , dirtyDelete
  , dirtyDeleteObject
  , dirtyFirst
  , dirtyIndexRead
  , dirtyLast
  , dirtyNext
  , dirtyPrev
  , dirtyRead
  , dirtyWrite
  , first
  , indexRead
  , info
  , last
  , next
  , prev
  , read
  , schema
  , start
  , stop
  , wread
  , write
  , writeWithLock
  , module Database.ETS
  ) where

import Control.Distributed.Node (Node)
import Control.Monad (IO)
import Data.Maybe (Maybe)
import Data.Unit (Unit)
import Foreign (ffiIO0, ffiIO1, ffiIO2, ffiIO3)

import Database.ETS (TableType(..))

type Table = Atom

type TableOptions =
  { tableType        :: TableType
  , accessMode       :: AccessMode
  , attributes       :: [Atom]
  , discCopies       :: [Node]
  , discOnlyCopies   :: [Node]
  , index            :: [Atom]
  , loadOrder        :: Integer
  , majority         :: Boolean
  , ramCopies        :: [Node]
  , recordName       :: Atom
  , localContent     :: Boolean
  -- , snmp             :: Term
  -- {'storage_properties', [{Backend::module(), [BackendProp::_]}]} |
  -- {'user_properties', proplists:proplist()}.
  }

data AccessMode = ReadWrite | ReadOnly

data Activity = AsyncDirty | SyncDirty | Transaction | SyncTransaction

data LockKind = RLock | WLock | StickyWLock

data StorageType = RamCopies | DiscCopies | DiscOnlyCopies

abort :: forall r. r -> IO ()
abort = ffiIO1 :mnesia :abort

-- activity/2

foreign import addTableCopy :: Table -> Node -> StorageType -> IO ()

foreign import addTableIndex :: Table -> Integer -> IO ()

allKeys :: forall k. Table -> IO [k]
allKeys = ffiIO1 :mnesia :all_keys

foreign import clearTable :: Table -> IO ()

foreign import createSchema :: [Node] -> IO ()

foreign import createTable :: Table -> TableOptions -> IO ()

foreign import delTableCopy :: Table -> Node -> IO ()

foreign import delTableIndex :: Table -> Integer -> IO ()

foreign import delete :: forall k. Table -> k -> IO ()

foreign import deleteWithLock :: forall k. Table -> k -> LockKind -> IO ()

foreign import deleteObject :: forall r. Table -> r -> IO ()

foreign import deleteObjectWithLock :: forall r. Table -> r -> LockKind -> IO ()

deleteSchema :: [Node] -> IO ()
deleteSchema = ffiIO1 :mnesia :delete_schema

foreign import deleteTable :: Table -> IO ()

dirtyAllKeys :: forall k. Table -> IO [k]
dirtyAllKeys = ffiIO1 :mnesia :dirty_all_keys

dirtyDelete :: forall k. Table -> k -> IO ()
dirtyDelete = ffiIO2 :mnesia :dirty_delete

foreign import dirtyDeleteObject :: forall a. Table -> a -> IO ()

dirtyFirst :: forall k. Table -> IO k
dirtyFirst = ffiIO1 :mnesia :dirty_first

dirtyIndexRead :: forall k r. Table -> k -> Integer -> IO [r]
dirtyIndexRead = ffiIO3 :mnesia :dirty_index_read

dirtyLast :: forall k. Table -> IO k
dirtyLast = ffiIO1 :mnesia :dirty_last

dirtyNext :: forall k. Table -> k -> IO k
dirtyNext = ffiIO2 :mnesia :dirty_next

dirtyPrev :: forall k. Table -> k -> IO k
dirtyPrev = ffiIO2 :mnesia :dirty_prev

dirtyRead :: forall k r. Table -> k -> IO r
dirtyRead = ffiIO2 :mnesia :dirty_read

dirtyWrite :: forall r. Table -> r -> IO ()
dirtyWrite = ffiIO2 :mnesia :dirty_write

first :: forall k. Table -> IO k
first = ffiIO1 :mnesia :first

indexRead :: forall k v. Table -> k -> Integer -> IO [v]
indexRead = ffiIO3 :mnesia :index_read

info :: IO ()
info = ffiIO0 :mnesia :info

last :: forall k. Table -> IO k
last = ffiIO1 :mnesia :last

foreign import next :: forall k. Table -> k -> IO (Maybe k)

foreign import prev :: forall k. Table -> k -> IO (Maybe k)

read :: forall k v. Table -> k -> IO [v]
read = ffiIO2 :mnesia :read

schema :: IO ()
schema = ffiIO0 :mnesia :schema

start :: IO ()
start = ffiIO0 :mnesia :start

stop :: IO ()
stop = ffiIO0 :mnesia :stop

foreign import wread :: forall k v. Table -> k -> IO [v]

foreign import write :: forall v. Table -> v -> IO ()

foreign import writeWithLock :: forall v. Table -> v -> LockKind -> IO ()

{-
activate_checkpoint/1
activity/4
add_table_copy/3
add_table_index/2
async_dirty/2
backup/1
backup_checkpoint/2
change_config/2
change_table_access_mode/2
change_table_copy_type/3
change_table_load_order/2
change_table_majority/2
deactivate_checkpoint/1
delete/3
delete_object/1
delete_object/3
delete_schema/1
delete_table/1
dirty_all_keys/1
dirty_delete/1
dirty_delete/2
dirty_delete_object/1
dirty_delete_object/2
dirty_first/1
dirty_index_match_object/2
dirty_index_match_object/3
dirty_index_read/3
dirty_last/1
dirty_match_object/1
dirty_match_object/2
dirty_next/2
dirty_prev/2
dirty_read/1
dirty_read/2
dirty_select/2
dirty_slot/2
dirty_update_counter/2
dirty_update_counter/3
dirty_write/1
dirty_write/2
dump_log/0
dump_tables/1
dump_to_textfile/1
error_description/1
ets/2
first/1
foldl/3
foldr/3
force_load_table/1
index_match_object/2
index_match_object/4
index_read/3
info/0
install_fallback/1
install_fallback/1
install_fallback/2
is_transaction/0
last/1
load_textfile/1
lock/2
match_object/1
match_object/3
move_table_copy/3
next/2
prev/2
read/1
read/2
read/3
read_lock_table/1
report_event/1
restore/2
s_delete/1
s_delete_object/1
s_write/1
schema/0
schema/1
select/2
select/4
select/1
set_debug_level/1
set_master_nodes/1
set_master_nodes/2
snmp_close_table/1
snmp_get_mnesia_key/2
snmp_get_next_index/2
snmp_get_row/2
snmp_open_table/2
start/0
stop/0
subscribe/1
sync_dirty/2
sync_log/0
sync_transaction/3
system_info/1
table/1
table_info/2
transaction/2
transform_table/4
transform_table/3
traverse_backup/4
uninstall_fallback/0
uninstall_fallback/1
unsubscribe/1
wait_for_tables/2
wread/1
write/1
write/3
write_lock_table/1
-}
