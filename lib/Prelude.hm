-----------------------------------------------------------------------------
-- |
-- Module      :  Prelude
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Prelude Module.
--
-----------------------------------------------------------------------------
module Prelude
  ( module Control.Process
  , module Data.Base
  , module Data.Bits
  , module Data.Bool
  , module Data.Either
  , module Data.Eq
  , module Data.Function
  , module Data.Int
--  , module Data.List
  , module Data.Maybe
  , module Data.Ord
  , module Data.Ref
  , module Data.Ring
  , module Data.Semigroup
  , module Data.Semiring
  , module Data.Show
  ) where

import Control.Process (Pid, Process)

import Data.Base (Double)
import Data.Bits (band, bnot, bor, bsl, bsr, bxor)
import Data.Bool ((&&), (||))
import Data.Either (Either(..))
import Data.Eq (class Eq, eq, notEq, (/=), (==))
-- import Data.List -- (map)
import Data.Function (apply, const, flip, identity)
import Data.Int (Int)
import Data.Maybe (Maybe)
import Data.Ord (class Ord, between, compare, comparing, greaterThan, greaterThanOrEq, lessThan, lessThanOrEq, max, min, (<), (<=), (>), (>=))
import Data.Ref (Ref, Reference, makeRef)
import Data.Ring (class Ring, (-))
import Data.Semigroup (class Semigroup, append, (<>))
import Data.Semiring (class Semiring, add, mul, one, zero, (*), (+))
import Data.Show (class Show, show)

