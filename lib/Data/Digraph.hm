-----------------------------------------------------------------------------
-- |
-- Module      :  Data.Digraph
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Directed Graph datatype.
--
-----------------------------------------------------------------------------
module Data.Digraph where

import Control.Monad (IO)
import Data.Unit (Unit)
import Data.Maybe (Maybe)
import Data.Either (Either)
import Foreign (ffiIO1, ffiIO2, ffiIO3)

foreign import data Graph :: Type -> Type -> Type
--                           ^-----  ^---
--               Label Type: Vertex  Edge

foreign import data Edge :: Type -> Type
foreign import data Vertex :: Type -> Type

data GraphType = Cyclic | Acyclic | Protected | Private

foreign import new :: forall a b. [GraphType] -> IO (Graph a b)

data EdgeError a = BadEdge [Vertex a] | BadVertex (Vertex a)

foreign import addEdge :: forall a b. Graph a b -> Vertex a -> Vertex a -> b -> IO (Either (EdgeError a) (Edge b))

foreign import addVertex :: forall a b. Graph a b -> a -> IO (Vertex a)

foreign import modifyEdge :: forall a b. Graph a b -> Edge b -> Vertex a -> Vertex a -> b -> IO (Either (EdgeError a) (Edge b))

modifyVertex :: forall a b. Graph a b -> Vertex a -> a -> IO (Vertex a)
modifyVertex = ffiIO3 :digraph :add_vertex

delEdge :: forall a b. Graph a b -> Edge b -> IO ()
delEdge = ffiIO2 :digraph :del_edge

delEdges :: forall a b. Graph a b -> [Edge b] -> IO ()
delEdges = ffiIO2 :digraph :del_edges

delPath :: forall a b. Graph a b -> Vertex a -> Vertex a -> IO ()
delPath = ffiIO3 :digraph :del_path

delVertex :: forall a b. Graph a b -> Vertex a -> IO ()
delVertex = ffiIO2 :digraph :del_vertex

delVertices :: forall a b. Graph a b -> [Vertex a] -> IO ()
delVertices = ffiIO2 :digraph :del_vertices

delete :: forall a b. Graph a b -> IO ()
delete = ffiIO1 :digraph :delete

foreign import edge :: forall a b. Graph a b -> Edge b -> IO (Maybe (Vertex a, Vertex a, b))

allEdges :: forall a b. Graph a b -> IO [Edge b]
allEdges = ffiIO1 :digraph :edges

foreign import vertex :: forall a b. Graph a b -> Vertex a -> IO (Maybe a)

allVertices :: forall a b. Graph a b -> IO [Vertex a]
allVertices = ffiIO1 :digraph :vertices

edges :: forall a b. Graph a b -> Vertex a -> IO [Edge b]
edges = ffiIO2 :digraph :edges

foreign import getCycle :: forall a b. Graph a b -> Vertex a -> IO [Vertex a]

foreign import getPath :: forall a b. Graph a b -> Vertex a -> Vertex a -> IO [Vertex a]

foreign import getShortCycle :: forall a b. Graph a b -> Vertex a -> IO [Vertex a]

foreign import getShortPath :: forall a b. Graph a b -> Vertex a -> Vertex a -> IO [Vertex a]

inDegree :: forall a b. Graph a b -> Vertex a -> IO Integer
inDegree = ffiIO2 :digraph :in_degree

inEdges :: forall a b. Graph a b -> Vertex a -> IO [Edge b]
inEdges = ffiIO2 :digraph :in_degree

inNeighbours :: forall a b. Graph a b -> Vertex a -> IO [Vertex a]
inNeighbours = ffiIO2 :digraph :in_neighbours

outDegree :: forall a b. Graph a b -> Vertex a -> IO Integer
outDegree = ffiIO2 :digraph :out_degree

outEdges :: forall a b. Graph a b -> Vertex a -> IO [Edge b]
outEdges = ffiIO2 :digraph :out_edges

outNeighbours :: forall a b. Graph a b -> Vertex a -> IO [Vertex a]
outNeighbours = ffiIO2 :digraph :out_neighbours

noEdges :: forall a b. Graph a b -> IO Integer
noEdges = ffiIO1 :digraph :no_edges

noVertices :: forall a b. Graph a b -> IO Integer
noVertices = ffiIO1 :digraph :no_vertices

data GraphInfo = GraphMemoryInfo Integer | GraphTypeInfo GraphType

foreign import info :: forall a b. Graph a b -> IO [GraphInfo]
