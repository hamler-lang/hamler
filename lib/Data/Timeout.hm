-----------------------------------------------------------------------------
-- |
-- Module      :  Data.Timeout
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Timeout datatype.
--
-----------------------------------------------------------------------------
module Data.Timeout where

import Data.Eq (class Eq, (==))
import Data.Ord (class Ord, compare)
import Data.Ordering (Ordering(..))
import Data.Show (class Show, show)
import Data.List ((++))

-- | The Erlang Timeout.
data Timeout = Infinity | Timeout Integer

instance Show Timeout where
  show Infinity = "Infinity"
  show (Timeout x) = "Timeout " ++ show x

instance Eq Timeout where
  eq Infinity Infinity = true
  eq (Timeout x) (Timeout y) = x == y
  eq _ _ = false

instance Ord Timeout where
  compare Infinity Infinity = EQ
  compare Infinity _        = GT
  compare _ Infinity        = LT
  compare (Timeout x) (Timeout y) = x `compare` y

isInfinity :: Timeout -> Boolean
isInfinity Infinity = true
isInfinity _        = false
