-----------------------------------------------------------------------------
-- |
-- Module      :  Data.Binary
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Erlang Binary datatype.
--
-----------------------------------------------------------------------------
module Data.Binary where

import Data.Eq (class Eq)
import Data.Ord (class Ord, Ordering(..))

import Foreign (ffi2)

-- | An alias for `BitString`. A `Binary` in erlang is a `Bitstring`,
-- | which length is evenly divisible by 8.
-- type Binary = BitString

-- | A `Bitstring` in Erlang is a sequence of zero or more bits.
foreign import data Binary :: Type

instance Eq Binary where
  eq = eqBinImpl

instance Ord Binary where
  compare = cmpBinImpl LT EQ GT

foreign import eqBinImpl :: Binary -> Binary -> Boolean

foreign import cmpBinImpl
  :: Ordering
  -> Ordering
  -> Ordering
  -> Binary
  -> Binary
  -> Ordering

-- | Split a binary into a list binaries.
split :: Binary -> Binary -> [Binary]
split = ffi2 :binary :split

