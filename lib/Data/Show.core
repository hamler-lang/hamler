module 'Show' ['module_info'/0,
	       'module_info'/1,
	       'showCharImp'/1,
	       'showFloatImp'/1,
	       'showInt'/1,
	       'showNum'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[83|[104|[111|[119|[46|[101|[114|[108]]]]]]]],1}],
		%% Line 24
		'spec' =
		    %% Line 24
		    [{{'showInt',1},[{'type',24,'fun',[{'type',24,'product',[{'type',24,'integer',[]}]}|[{'type',24,'string',[]}]]}]}],
		%% Line 28
		'spec' =
		    %% Line 28
		    [{{'showFloat',1},[{'type',28,'fun',[{'type',28,'product',[{'type',28,'float',[]}]}|[{'type',28,'string',[]}]]}]}],
		%% Line 33
		'spec' =
		    %% Line 33
		    [{{'showNum',1},[{'type',33,'fun',[{'type',33,'product',[{'type',33,'number',[]}]}|[{'type',33,'string',[]}]]}]}],
		%% Line 40
		'spec' =
		    %% Line 40
		    [{{'showChar',1},[{'type',40,'fun',[{'type',40,'product',[{'type',40,'char',[]}]}|[{'type',40,'string',[]}]]}]}]]
'showInt'/1 =
    %% Line 25
    fun (_0) ->
	call 'erlang':'integer_to_list'
	    (_0)
'showFloatImp'/1 =
    %% Line 29
    fun (_0) ->
	let <_1> =
	    call %% Line 30
		 'erlang':%% Line 30
			  'abs'
		(_0)
	in  let <_2> =
		apply %% Line 30
		      'precision'/2
		    (_1, %% Line 30
			 0)
	    in  %% Line 30
		call 'erlang':'float_to_list'
		    (_0, [{'decimals',_2}|[]])
'showNum'/1 =
    %% Line 34
    fun (_0) ->
	case _0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      %% Line 35
	      apply 'showInt'/1
		  (N)
	  %% Line 36
	  <N>
	      when call 'erlang':'is_float'
		    (_0) ->
	      %% Line 37
	      apply 'showFloat'/1
		  (N)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'showNum',1}}] )
	    -| ['compiler_generated'] )
	end
'showCharImp'/1 =
    %% Line 41
    fun (_0) ->
	[_0|[]]
'precision'/2 =
    %% Line 43
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 44
		 'erlang':%% Line 44
			  'trunc'
		(_0)
	in  %% Line 44
	    case <> of
	      %% Line 45
	      <>
		  when call 'erlang':'=='
			(_0,
			 _2) ->
		  _1
	      %% Line 46
	      <> when 'true' ->
		  let <_4> =
		      call 'erlang':'*'
			  (_0, 1.00000000000000000000e+01)
		  in  let <_3> =
			  call 'erlang':'+'
			      (_1, 1)
		      in  apply 'precision'/2
			      (_4, _3)
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('Show')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('Show', _0)
end