module 'Show' ['module_info'/0,
	       'module_info'/1,
	       'showAny'/1,
	       'showCharImpl'/1,
	       'showFloatImpl'/1,
	       'showIntImpl'/1,
	       'showNumImpl'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[83|[104|[111|[119|[46|[101|[114|[108]]]]]]]],1}],
		%% Line 25
		'spec' =
		    %% Line 25
		    [{{'showIntImpl',1},[{'type',25,'fun',[{'type',25,'product',[{'type',25,'integer',[]}]}|[{'type',25,'string',[]}]]}]}],
		%% Line 29
		'spec' =
		    %% Line 29
		    [{{'showFloatImpl',1},[{'type',29,'fun',[{'type',29,'product',[{'type',29,'float',[]}]}|[{'type',29,'string',[]}]]}]}],
		%% Line 34
		'spec' =
		    %% Line 34
		    [{{'showNumImpl',1},[{'type',34,'fun',[{'type',34,'product',[{'type',34,'number',[]}]}|[{'type',34,'string',[]}]]}]}],
		%% Line 41
		'spec' =
		    %% Line 41
		    [{{'showCharImpl',1},[{'type',41,'fun',[{'type',41,'product',[{'type',41,'char',[]}]}|[{'type',41,'string',[]}]]}]}],
		%% Line 50
		'spec' =
		    %% Line 50
		    [{{'showAny',1},[{'type',50,'fun',[{'type',50,'product',[{'type',50,'any',[]}]}|[{'type',50,'string',[]}]]}]}]]
'showIntImpl'/1 =
    %% Line 26
    fun (_0) ->
	call 'erlang':'integer_to_list'
	    (_0)
'showFloatImpl'/1 =
    %% Line 30
    fun (_0) ->
	let <_1> =
	    call %% Line 31
		 'erlang':%% Line 31
			  'abs'
		(_0)
	in  let <_2> =
		apply %% Line 31
		      'precision'/2
		    (_1, %% Line 31
			 0)
	    in  %% Line 31
		call 'erlang':'float_to_list'
		    (_0, [{'decimals',_2}|[]])
'showNumImpl'/1 =
    %% Line 35
    fun (_0) ->
	case _0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_0) ->
	      %% Line 36
	      apply 'showIntImpl'/1
		  (N)
	  %% Line 37
	  <N>
	      when call 'erlang':'is_float'
		    (_0) ->
	      %% Line 38
	      apply 'showFloatImpl'/1
		  (N)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'showNumImpl',1}}] )
	    -| ['compiler_generated'] )
	end
'showCharImpl'/1 =
    %% Line 42
    fun (_0) ->
	[_0|[]]
'precision'/2 =
    %% Line 44
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 45
		 'erlang':%% Line 45
			  'trunc'
		(_0)
	in  %% Line 45
	    case <> of
	      %% Line 46
	      <>
		  when call 'erlang':'=='
			(_0,
			 _2) ->
		  _1
	      %% Line 47
	      <> when 'true' ->
		  let <_4> =
		      call 'erlang':'*'
			  (_0, 1.00000000000000000000e+01)
		  in  let <_3> =
			  call 'erlang':'+'
			      (_1, 1)
		      in  apply 'precision'/2
			      (_4, _3)
	    end
'showAny'/1 =
    %% Line 51
    fun (_0) ->
	let <_1> =
	    call 'io_lib':'format'
		([126|[112]], [_0|[]])
	in  call 'lists':'flatten'
		(_1)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('Show')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('Show', _0)
end