module 'Foreign' ['ffi'/3,
		  'ffiIO'/3,
		  'module_info'/0,
		  'module_info'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[70|[111|[114|[101|[105|[103|[110|[46|[101|[114|[108]]]]]]]]]]],1}],
		%% Line 19
		'spec' =
		    %% Line 19
		    [{{'ffi',3},[{'type',19,'fun',[{'type',19,'product',[{'type',19,'string',[]}|[{'type',19,'string',[]}|[{'type',19,'arity',[]}]]]}|[{'type',19,'fun',[]}]]}]}],
		%% Line 23
		'spec' =
		    %% Line 23
		    [{{'ffiIO',3},[{'type',23,'fun',[{'type',23,'product',[{'type',23,'string',[]}|[{'type',23,'string',[]}|[{'type',23,'arity',[]}]]]}|[{'type',23,'fun',[]}]]}]}],
		%% Line 29
		'compile' =
		    %% Line 29
		    [{'inline',[{'atom',1}]}]]
'ffi'/3 =
    %% Line 20
    fun (_0,_1,_2) ->
	case <_0,_1,_2> of
	  <Mod,Fun,Arity>
	      when call 'erlang':'>='
		    (Arity,
		     0) ->
	      let <_4> =
		  call %% Line 30
		       ( 'erlang'
			 -| ['compiler_generated'] ):%% Line 30
						     ( 'list_to_existing_atom'
						       -| ['compiler_generated'] )
		      (%% Line 21
		       Mod)
	      in  let <_3> =
		      call %% Line 30
			   ( 'erlang'
			     -| ['compiler_generated'] ):%% Line 30
							 ( 'list_to_existing_atom'
							   -| ['compiler_generated'] )
			  (%% Line 21
			   Fun)
		  in  %% Line 21
		      apply 'curry'/4
			  (_4, _3, [], Arity)
	  ( <_7,_6,_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6,_5})
		  -| [{'function_name',{'ffi',3}}] )
	    -| ['compiler_generated'] )
	end
'ffiIO'/3 =
    %% Line 24
    fun (_0,_1,_2) ->
	apply 'ffi'/3
	    (_0, _1, _2)
'curry'/4 =
    %% Line 26
    fun (_0,_1,_2,_3) ->
	case <_0,_1,_2,_3> of
	  <M,F,A,0> when 'true' ->
	      let <_4> =
		  call 'lists':'reverse'
		      (A)
	      in  call 'erlang':'apply'
		      (M, F, _4)
	  %% Line 27
	  <M,F,A,N> when 'true' ->
	      ( fun (_6) ->
		    let <_5> =
			call 'erlang':'-'
			    (N, 1)
		    in  apply 'curry'/4
			    (M, F, [_6|A], _5)
		-| [{'id',{0,0,'-curry/4-fun-0-'}}] )
	end
'atom'/1 =
    %% Line 30
    fun (_0) ->
	call 'erlang':'list_to_existing_atom'
	    (_0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('Foreign')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('Foreign', _0)
end