-----------------------------------------------------------------------------
-- |
-- Module      :  DemoServer
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The GenServer Demo.
--
-----------------------------------------------------------------------------
module DemoServer where

import Prelude
import Control.Behaviour.GenServer
  ( class GenServer
  , class LifeCircle
  , terminateDefault
  , HandleCall
  , HandleCast
  , InitResult(..)
  , ServerRef(..)
  , ServerAction(..)
  , callTo
  , castTo
  , noReply
  , reply
  , startServer
  , stopServer
  )
import Kernel.Application as App

data Request = Inc | Dec | Query

data Reply = QueryResult Integer

data State = State Integer

-----------------------------------------------------------------------------
-- | Server API
-----------------------------------------------------------------------------

inc :: Pid -> Process ()
inc pid = castTo pid Inc

dec :: Pid -> Process ()
dec pid = castTo pid Dec

query :: Pid -> Process Integer
query pid = do
  QueryResult i <- callTo pid Query
  return i

-----------------------------------------------------------------------------
-- | Server callbacks
-----------------------------------------------------------------------------

instance LifeCircle State where
  terminate = terminateDefault

instance GenServer Request Reply State where
  handleCall = handleCall
  handleCast = handleCast

init :: Integer -> Process (InitResult State)
init n = return $ InitOk (State n)

handleCall :: HandleCall Request Reply State
handleCall Query (State i) = reply (QueryResult i) (State i)
handleCall _ st = return $ ServerIgnore st

handleCast :: HandleCast Request State
handleCast Inc (State n) = noReply $ State (n+1)
handleCast Dec (State n) = noReply $ State (n-1)
handleCast _ st = noReply st

-----------------------------------------------------------------------------
-- | main
-----------------------------------------------------------------------------

main :: IO Integer
main = do
  App.ensureStarted :sasl
  pid <- startServer init 10
  inc pid
  inc pid
  inc pid
  reply <- query pid
  stopServer (ServerPid pid)
  return reply
