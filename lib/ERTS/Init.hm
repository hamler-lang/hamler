-----------------------------------------------------------------------------
-- |
-- Module      :  ERTS.Init
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Init Module.
--
-----------------------------------------------------------------------------
module ERTS.Init where

import Data.Binary (Binary)
import Data.Unit (Unit)
import Foreign

type Arguments = List String

data InternalStatus = Starting | Started | Stopping

type ProvidedStatus = String

type ScriptId = Tuple (String, String)

restart :: IO Unit
restart = ffiIO0 "init" "restart"

reboot :: IO Unit
reboot = ffiIO0 "init" "reboot"

stop :: IO Unit
stop = ffiIO0 "init" "stop"

foreign import getStatus :: IO (Tuple (InternalStatus, ProvidedStatus))

boot :: List Binary
boot = ffiIO0 "init" "boot"

foreign import getArguments :: IO (List (Tuple (String, Arguments)))

foreign import getArgument :: String -> IO (Maybe Arguments)

getPlainArguments :: IO (Arguments)
getPlainArguments = ffiIO0 "init" "getPlainArguments"

scriptId :: IO ScriptId
scriptId = ffiIO0 "init" "script_id"

