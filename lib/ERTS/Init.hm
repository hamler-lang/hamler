-----------------------------------------------------------------------------
-- |
-- Module      :  ERTS.Init
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Init Module.
--
-----------------------------------------------------------------------------
module ERTS.Init where

import Control.Monad (IO)
import Data.Binary (Binary)
import Data.Maybe (Maybe)
import Data.Unit (Unit)
import Foreign

type Arguments = [String]

data InternalStatus = Starting | Started | Stopping

type ProvidedStatus = String

restart :: IO Unit
restart = ffiIO0 "init" "restart"

reboot :: IO Unit
reboot = ffiIO0 "init" "reboot"

stop :: IO Unit
stop = ffiIO0 "init" "stop"

-- TODO: cannot parse Tuple
-- foreign import getStatus :: IO (InternalStatus, ProvidedStatus)

boot :: IO [Binary]
boot = ffiIO0 "init" "boot"

-- TODO: cannot parse Tuple
-- foreign import getArguments :: IO (List (String, Arguments))

foreign import getArgument :: String -> IO (Maybe Arguments)

getPlainArguments :: IO (Arguments)
getPlainArguments = ffiIO0 "init" "getPlainArguments"

-- TODO: cannot parse Tuple
-- scriptId :: IO (String, String)
-- scriptId = ffiIO0 "init" "script_id"

